@page "/OrdersPage"
@using Microsoft.AspNetCore.Identity;
@using BlzMON.Data
@using BlzMON.Models
@using Radzen
@using Radzen.Blazor
@using System.Data
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Mvc.Localization;
@using System.Collections.Generic;
@using System.Linq;
@using Microsoft.EntityFrameworkCore;

@namespace BlzMON.Pages

@inject UserManager<ApplicationUser> _userManager;
@inject ApplicationDbContext db
@inject IViewLocalizer Localizer
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager

<!-- List of Orders -->
@if (!ShowPopup)
{
    <div class="row">
        <div class="col-md-4"></div>
        <div class="col-md-4"><h4>Приказы</h4></div>
        <div class="col-md-4"></div>
    </div>

    <table class="table">
        <tr>
            <td><button class="btn btn-success" @onclick="AddNew">Добавить</button></td>
        </tr>
    </table>

    <RadzenGrid AllowFiltering="true" FilterCaseSensitivity="Radzen.FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="4"
                AllowSorting="true" Data="@orders" TItem="Orders" ColumnWidth="150px">
        <Columns>
            <RadzenGridColumn Width="30px" TItem="Orders" Property="Id" Title="Id"></RadzenGridColumn>
            @*<RadzenGridColumn TItem="Orders" Property="OrderName" Title="Название"></RadzenGridColumn>*@
            <RadzenGridColumn TItem="Orders" Property="OrderName" Title="Название" Filterable="true" Sortable="true" TextAlign="TextAlign.Center">
                <Template Context="order">
                    <span class="text-secondary" @onclick="@(() => NavigateToOrderPage(order.Id))">@order.OrderName</span>
                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn Width="70px" TItem="Orders" Property="OrderDate" Title="Дата"></RadzenGridColumn>
            <RadzenGridColumn Width="30px" TItem="Orders" Property="OrderCode" Title="Код"></RadzenGridColumn>
            <RadzenGridColumn Width="30px" TItem="Orders" Filterable="false" Sortable="false" TextAlign="Radzen.TextAlign.Center">
                <Template Context="сonclusion">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Click="@(args => Edit(сonclusion))" />
                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn Width="30px" TItem="Orders" Filterable="false" Sortable="false" TextAlign="Radzen.TextAlign.Center">
                <Template Context="сonclusion">
                    <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Light" Click="@(args => Edit(сonclusion))" />
                </Template>
            </RadzenGridColumn>
        </Columns>
    </RadzenGrid>
}


<!-- Editing or adding new Order -->
@if (ShowPopup)
{
    <div class="row">
        <div class="col-md-4"></div>
        <div class="col-md-4"><h4>Редактирование</h4></div>
        <div class="col-md-4"></div>
    </div>

    <table class="table">
        <tr>
            <td class="text-center font-weight-bold">Приказ</td>
            <td><input type="text" class="form-control" @bind="@order.OrderName" /></td>
        </tr>
        <tr>
            <td class="text-center font-weight-bold">Номер приказа</td>
            <td><input type="text" class="form-control col-5" @bind="@order.OrderCode" /></td>
        </tr>
        <tr>
            <td class="text-center font-weight-bold">Дата приказа</td>
            <td><RadzenDatePicker @bind-Value="order.OrderDate" DateFormat="d" ShowTime="false" Utc="false" Change="@(args => Change(args, "DatePicker", "MM/dd/yyyy"))" /></td>
        </tr>
    </table>

    <div class="d-flex justify-content-center">
        <div class="p-1">
            <button class="btn btn-primary" @onclick="Save">
                Сохранить
            </button>
        </div>
        <div class="p-1">
            <button class="btn btn-light" @onclick="ClosePopup">
                Назад
            </button>
        </div>
    </div>
    <br />
    <br />
    <br />


    @* List of initiators datagrid *@

    <RadzenGrid Data="@initializers"
                AllowFiltering="true" AllowPaging="true" AllowSorting="true" StartsWithText="Поиск" TItem="Initializers" ColumnWidth="200px">
        <Columns>
            <RadzenGridColumn Width="70px" TextAlign="TextAlign.Center" TItem="Initializers" Property="Id" Title="ID" />

            @*<RadzenGridColumn Width="110px" TItem="Initializers" Property="Areak.AreaName" Title="Область" />*@
            <RadzenGridColumn Width="150px" Filterable="true" Sortable="true" TextAlign="TextAlign.Center" Property="GetFullName" Title="ФИО" TItem="Initializers">
                <Template Context="initializer">
                    <span class="text-secondary" @onclick="@(() => ShowDetailsDialog(initializer))">@initializer.GetFullName</span>
                    @*<RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" />*@
                </Template>
            </RadzenGridColumn>
            @*<RadzenGridColumn Width="150px"TItem="Initializers" Context="initializer" Property="GetFullName" Title="ФИО" />*@
            <RadzenGridColumn Width="170px" TItem="Initializers" Property="Possition.PossName" Title="Должность" />
            @*<RadzenGridColumn Width="150px" TItem="Initializers" Property="Education.EduName" Title="Образование" />
                <RadzenGridColumn Width="150px" TItem="Initializers" Property="WorkExpierence" Title="Опыт" />
                <RadzenGridColumn Width="150px" TItem="Initializers" Property="Areak.AreaName" Title="Область" />
                <RadzenGridColumn Width="150px" TItem="Initializers" Property="DateOfBirth" Title="Дата рождения" />
                <RadzenGridColumn Width="150px" TItem="Initializers" Property="CellPhone" Title="Телефон" />
                <RadzenGridColumn Width="150px" TItem="Initializers" Property="EmailAddress" Title="E-почта" />
                <RadzenGridColumn Width="150px" TItem="Initializers" Property="PersonAddress" Title="Адрес" />*@
            <RadzenGridColumn Width="170px" TItem="Initializers" Property="Award.AwardName" Title="Награда" />
            @*<RadzenGridColumn Width="150px" TItem="Initializers" Property="Orders.OrderName" Title="Приказ" />*@

            <RadzenGridColumn Width="150px" Filterable="false" Sortable="false" Title="Включть/Исключить" TextAlign="TextAlign.Center" TItem="Initializers">
                <Template Context="initializer">
                    @* If Init attached to this order //but this Init can be only in one Order *@
                    @if (order.Id > 0 && initializer.OrdersId == order.Id)
                    {
                        <input type="checkbox" checked class="form-control-lg" @onclick="@(() => AttachInitToOrder(initializer))" />
                    }
                    else
                    {
                        <input type="checkbox" class="form-control-lg" @onclick="@(() => AttachInitToOrder(initializer))" />
                    }

                    @*<RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Click="@(() => AttachInitToOrder(initializer))" />*@
                </Template>
            </RadzenGridColumn>
<<<<<<< HEAD
            <RadzenGridColumn TItem="Initializers">
                <Template Context="initializer">
                    <RadzenCheckBox @bind-Value="@CheckBox1Value" Style="margin-bottom: 20px" TValue="bool" Change="@(args => Change(args, "CheckBox1 CheckBox"))" />
                </Template>
            </RadzenGridColumn>
=======
>>>>>>> ee96438... Order page
        </Columns>
    </RadzenGrid>

    <br />
    <br />
    <br />
    <br />

    <div class="shadow p-3 mb-5 bg-white rounded">
        Для включения инициаторов в приказ, выберите их в таблице и поставтье галочку.<br />
        Для завершения нажмите кнопку <i>Сохранить</i>
    </div>
    <br />
}

<!-- Show details about Initializer -->
@if (isShowDetailsDialog)
{
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog modal-lg">
            <div class="modal-content p-5">
                @*<div class="modal-header">
                        <h3 class="modal-title">@showDetailsInitializer.GetFullName</h3>
                        <button type="button" class="close" @onclick="@(() => isShowDetailsDialog = false)">
                            <span aria-hidden="true">X</span>
                        </button>
                    </div>*@

                <div class="d-flex justify-content-between">
                    <div>
                        <p class="p-2">Инициатор</p>
                    </div>
                    <div>
                        <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Click="@(() => isShowDetailsDialog = false)" />
                    </div>
                </div>


                <div class="modal-body p-2">

                    <div class="row">
                        <div class="col-6">
                            <b class="font-weight-bold">ФИО</b><br />
                            <p class="p-2" style="color:#000">
                                @showDetailsInitializer.GetFullName
                            </p>
                        </div>
                        @*<div class="col-1">
                                <b>Id</b><br />
                                <span class="p-2" style="color:#000">
                                    @showDetailsInitializer.Id
                                </span>
                            </div>*@
                        <div class="col-4">
                            <b>Дата рождения</b><br />
                            <p class="p-2" style="color:#000">
                                @showDetailsInitializer.DateOfBirth.ToString("d")
                            </p>
                        </div>
                    </div>
                    <hr />

                    <div class="row">
                        <div class="col-8">
                            <b class="font-weight-bold">Образование</b><br />
                            <p class="p-2" style="color:#000">
                                @showDetailsInitializer.Education.EduName
                            </p>
                        </div>
                    </div>
                    <hr />

                    <div class="row">
                        <div class="col-6">
                            <b class="font-weight-bold">Должность</b><br />
                            <p class="p-2" style="color:#000">
                                @showDetailsInitializer.Possition.PossName
                            </p>
                        </div>
                        <div class="col-4">
                            <b>Опыт</b><br />
                            <p class="p-2" style="color:#000">
                                @showDetailsInitializer.WorkExpierence
                            </p>
                        </div>
                    </div>
                    <hr />

                    <div class="row">
                        <div class="col-6">
                            <b>Область</b><br />
                            <p class="p-2" style="color:#000">
                                @showDetailsInitializer.Areak.AreaName
                            </p>
                        </div>
                        <div class="col-4">
                            <b>Район</b><br />
                            <p class="p-2" style="color:#000">
                                @showDetailsInitializer.Region.RegName
                            </p>
                        </div>
                    </div>
                    <hr />

                    <div class="row">
                        <div class="col-6">
                            <b class="font-weight-bold">Телефон</b><br />
                            <p class="p-2" style="color:#000">
                                @showDetailsInitializer.CellPhone
                            </p>
                        </div>
                        <div class="col-4">
                            <b>E-почта</b><br />
                            <p class="p-2" style="color:#000">
                                @showDetailsInitializer.EmailAddress
                            </p>
                        </div>
                    </div>
                    <hr />

                    <div class="row">
                        <div class="col-8">
                            <b class="font-weight-bold">Адрес</b><br />
                            <p class="p-2" style="color:#000">
                                @showDetailsInitializer.PersonAddress
                            </p>
                        </div>
                    </div>
                    <hr />

                    <div class="row">
                        <div class="col-6">
                            <b class="font-weight-bold">На награду</b><br />
                            <p class="p-2" style="color:#000">
                                @showDetailsInitializer.Award.AwardName
                            </p>
                        </div>
                        <div class="col-4">
                            <b>Приказ</b><br />
                            <p class="p-2" style="color:#000">
                                @if (showDetailsInitializer.Orders != null)
                                {@showDetailsInitializer.Orders.OrderName}
                            </p>
                        </div>
                    </div>
                    <hr />

                    <div class="row">
                        <div class="col-6">
                            <b class="font-weight-bold">Файлы</b><br />
                            <p class="p-2" style="color:#000">
                                @if (showDetailsInitializer.FilesNamesZayavleniye != null)
                                {
                                    @foreach (string fileName in showDetailsInitializer.FilesNamesZayavleniye.Split(";"))
                                    {
                                        <a class="p-1" href="ReadFile/ReadFile?i=@showDetailsInitializer.Id&f=@fileName" target="_blank">
                                            @fileName
                                        </a>
                                    }
                                    <br />
                                }
                                @if (showDetailsInitializer.FilesNamesPredstavleniye != null)
                                {
                                    @foreach (string fileName in showDetailsInitializer.FilesNamesPredstavleniye.Split(";"))
                                    {
                                        <a class="p-1" href="ReadFile/ReadFile?i=@showDetailsInitializer.Id&f=@fileName" target="_blank">
                                            @fileName
                                        </a>
                                    }
                                    <br />
                                }
                                @if (showDetailsInitializer.FilesNamesNagrady != null)
                                {
                                    @foreach (string fileName in showDetailsInitializer.FilesNamesNagrady.Split(";"))
                                    {
                                        <a class="p-1" href="ReadFile/ReadFile?i=@showDetailsInitializer.Id&f=@fileName" target="_blank">
                                            @fileName
                                        </a>
                                    }
                                    <br />
                                }
                                @if (showDetailsInitializer.FilesNamesTrudovaya != null)
                                {
                                    @foreach (string fileName in showDetailsInitializer.FilesNamesTrudovaya.Split(";"))
                                    {
                                        <a class="p-1" href="ReadFile/ReadFile?i=@showDetailsInitializer.Id&f=@fileName" target="_blank">
                                            @fileName
                                        </a>
                                    }
                                    <br />
                                }
                                @if (showDetailsInitializer.FilesNamesVypyska != null)
                                {
                                    @foreach (string fileName in showDetailsInitializer.FilesNamesVypyska.Split(";"))
                                    {
                                        <a class="p-1" href="ReadFile/ReadFile?i=@showDetailsInitializer.Id&f=@fileName" target="_blank">
                                            @fileName
                                        </a>
                                    }
                                    <br />
                                }
                            </p>
                        </div>
                    </div>
                    <hr />

                    <br />
                    <br />
                    <br />
                    <br />
                    <p></p>

                </div>
            </div>

        </div>
    </div>
}


@code {

    // list of inits
    public List<Initializers> initializers = new List<Initializers>();

    // For search inits
    private int CurrentValue { get; set; }
    public string itemValue { get; set; }

    //
    public string item
    {
        get { return itemValue; }
        set
        {
            CurrentValue = orders.Count();
            if (value.Length > 0)
            {
                orders = orders2.Where(x => x.OrderName.ToLower().Contains(value)).ToList();
            }
            else
            {
                orders = orders2;
            }
            itemValue = value;
        }
    }

    //
    private List<Orders> orders = new List<Orders>();
    private List<Orders> orders2 = new List<Orders>();
    private Orders order = new Orders();
    //authentication
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    System.Security.Claims.ClaimsPrincipal CurrentUser;

    ApplicationUser objUser;
    string strError = "";
    bool ShowPopup = false;//Close edit popup


    public void LoadData()//Load data of Order
    {
        //
        orders = db.Order
        .Include(o => o.InitiList)
        .Include(o => o.InitiList)
        .Include(o => o.InitiList)
        .Include(o => o.InitiList)
        .OrderBy(x => x.OrderName)
        .ToList();

        //
        initializers = db.Initializers
            .OrderBy(x => x.PersonSurname)
            .Include(o => o.Possition)
            .Include(o => o.Education)
            .Include(o => o.Areak)
            .Include(o => o.Award)
            .Include(o => o.Region)
            .ToList();
    }

    void AddNew()// Add new order
    {
        order = new Orders();
        order.Id = 0;
        order.OrderDate = DateTime.Now;

        ShowPopup = true;
        //regions = db.Region.ToList();
    }
    async Task Save()//Save data in edit popup
    {
        try
        {
            // Is this an existing user?
            if (order.Id != 0)
            {
                Orders ord = await db.Order.FindAsync(order.Id);
                ord.OrderName = order.OrderName;//Set in DB changes
                ord.OrderCode = order.OrderCode;
                ord.OrderDate = order.OrderDate;
                ord.InitiList = order.InitiList;

                await db.SaveChangesAsync();
            }
            else
            {
                //  int maxId = db.Order.Max(x => x.Id);
                //  order.Id = (maxId + 1);
                db.Order.Add(order);//Set in DB new order
                await db.SaveChangesAsync();
            }

            // attaching Inits to Orders
            foreach (int initId in attachedInits)
            {
                // find init and change order id
                Initializers init = db.Initializers.Find(initId);
                init.OrdersId = order.Id;
                // update
                db.Initializers.Update(init);


                System.Diagnostics.Debug.Print(init.GetFullName);
            }
            await db.SaveChangesAsync();

            // Close the Popup
            ShowPopup = false;
            // Refresh Users
            LoadData();
            order = new Orders();
        }
        catch (Exception ex)
        {
            strError = ex.GetBaseException().Message;
        }
    }
    void Edit(Orders rc)//edit order
    {
        order = rc;//load data
                   //products = db.Products.Where(x => x.CategoryId == ).ToList();

        order.OrderDate = DateTime.Now;
        ShowPopup = true; //open edit popup
    }

    async Task Delete()
    {
        // Close the Popup
        ShowPopup = false;
        // Get the user
        var rc = await db.Order.FindAsync(order.Id);

        if (rc != null)
        {
            db.Order.Remove(rc);
            await db.SaveChangesAsync();
        }
        LoadData();
    }
    void ClosePopup()
    {
        // Close the Popup
        ShowPopup = false;
    }

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = (await authenticationStateTask).User;
        objUser = await _userManager.FindByNameAsync(CurrentUser.Identity.Name);
        order = new Orders();
        LoadData();

    }


    private async Task Insert()//it havent used
    {
        db.Order.Add(order);
        await db.SaveChangesAsync();
        orders.Add(order);
        order = new Orders();
    }

    //For DateTime calender
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();
    void Change(DateTime? value, string name, string format)
    {
        events.Add(DateTime.Now, $"{name} value changed to {value?.ToString(format)}");
        StateHasChanged();
    }

    // Method to navigate order page without refreshing page
    private void NavigateToOrderPage(int orderId)
    {
        navigationManager.NavigateTo("OrderPage/" + orderId);
    }


    // attach or deattach Init to Order
    List<int> attachedInits = new List<int>();

    private void AttachInitToOrder(Initializers init)
    {
        if (!attachedInits.Contains(init.Id))
        {
            // add Init id to array, to use in Save
            attachedInits.Add(init.Id);
        }
        else
        {
            // remove Init id from array
            attachedInits.Remove(init.Id);
        }
    }


    // Details dialog
    bool isShowDetailsDialog = false;
    Initializers showDetailsInitializer = new Initializers();

    void ShowDetailsDialog(Initializers initializer)
    {
        isShowDetailsDialog = true;

        // get from database, becouse file names will updated after upload
        showDetailsInitializer = db.Initializers.Find(initializer.Id);
        // showDetailsInitializer = initializer;
    }
<<<<<<< HEAD
    bool CheckBox1Value;
    bool? CheckBox2Value;
    bool? CheckBox3Value = true;


    void Change(bool? value, string name)
    {
        events.Add(DateTime.Now, $"{name} value changed to {value}");
        StateHasChanged();
    }
=======


>>>>>>> ee96438... Order page
}
