@page "/SecondDepPage"

@using Microsoft.AspNetCore.Identity;
@using BlzMON.Data
@using BlzMON.Models
@using Radzen
@using Radzen.Blazor
@using System.Data
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Mvc.Localization;
@using System.Collections.Generic;
@using System.Linq;
@using Microsoft.EntityFrameworkCore;
@inject UserManager<ApplicationUser> _userManager;
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@inject ApplicationDbContext db



<div class="row">
    <div class="col-md-4"></div>
    <div class="col-md-4"><h4>Департаменты</h4></div>
    <div class="col-md-4"></div>
</div>

<table class="table">
    <tr>
        <td><button class="btn btn-success" @onclick="AddNew">Добавить</button></td>
    </tr>
</table>


<RadzenGrid AllowFiltering="true" FilterCaseSensitivity="Radzen.FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="4" AllowSorting="true" Data="@seconddeps" TItem="SecondDeps" ColumnWidth="150px">
    <Columns>
        <RadzenGridColumn TItem="SecondDeps" Property="Id" Title="ID" Width="40px" />
        <RadzenGridColumn TItem="SecondDeps" Property="DepName" Title="Наименование " />
        <RadzenGridColumn TItem="SecondDeps" Property="DepPhone" Title="Телефон " Width="100px" />
        <RadzenGridColumn TItem="SecondDeps" Property="DepEmail" Title="Почта " Width="100px" />
        <RadzenGridColumn TItem="SecondDeps" Property="DepAddress" Title="Адрес " Width="100px" />
        <RadzenGridColumn TItem="SecondDeps" Property="Person" Title="Контактное лицо" />

        @*<RadzenGridColumn TItem="IdentityRole" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">*@
        <RadzenGridColumn TItem="SecondDeps" Filterable="false" Sortable="false" TextAlign="Radzen.TextAlign.Center" Width="60px">
            <Template Context="seconddep">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Click="@(args => Edit(seconddep))" />
            </Template>
        </RadzenGridColumn>

        <RadzenGridColumn TItem="SecondDeps" Filterable="false" Sortable="false" TextAlign="Radzen.TextAlign.Center" Width="60px">
            <Template Context="seconddep">
                <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Light" Click="@(args => Delete(seconddep))" />
            </Template>
        </RadzenGridColumn>

    </Columns>
</RadzenGrid>

@if (ShowPopup)
{
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content p-4">

                <div class="d-flex justify-content-between">
                    <div>
                        <p class="p-2">@title</p>
                    </div>
                    <div>
                        <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Click="@ClosePopup" />
                    </div>
                </div>
                <br />

                <div class="form-group">
                    <label for="e1" class="p-2 font-weight-bold">Наименование департамента</label>
                    <input type="text" class="form-control" id="e1" @bind="@seconddep.DepName">

                    <label for="e1" class="p-2 font-weight-bold"> Телефон департамента </label>
                    <input type="text" class="form-control" id="e1" @bind="@seconddep.DepPhone">

                    <label for="e1" class="p-2 font-weight-bold">Почта департамента</label>
                    <input type="text" class="form-control" id="e1" @bind="@seconddep.DepEmail">

                    <label for="e1" class="p-2 font-weight-bold">Адрес департамента</label>
                    <input type="text" class="form-control" id="e1" @bind="@seconddep.DepAddress">

                    <label for="e1" class="p-2 font-weight-bold">Контактное лицо</label>
                    <input type="text" class="form-control" id="e1" @bind="@seconddep.Person">
                </div>

                <br />


                <div class="d-flex justify-content-center p-1">
                    <button class="btn btn-sm btn-primary" @onclick="Save">
                        Сохранить
                    </button>
                </div>
            </div>

        </div>
    </div>}


@code {

    private int CurrentValue { get; set; }
    public string itemValue { get; set; }
    public string item
    {
        get { return itemValue; }
        set
        {
            CurrentValue = seconddeps.Count();
            if (value.Length > 0)
            {
                seconddeps = seconddeps2.Where(x => x.Person.ToLower().Contains(value)).ToList();//wtf
            }
            else
            {
                seconddeps = seconddeps2;
            }
            itemValue = value;
        }
    }
    private List<SecondDeps> seconddeps = new List<SecondDeps>();
    private List<SecondDeps> seconddeps2;
    private SecondDeps seconddep = new SecondDeps();

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    System.Security.Claims.ClaimsPrincipal CurrentUser;

    ApplicationUser objUser;
    string strError = "";
    string title = "";
    bool ShowPopup = false;


    void AddNew()
    {
        seconddep = new SecondDeps();
        //initializer.Code = "Test";   // What is it? double shit :0
        seconddep.Id = 0;
        title = "Новая запись";
        ShowPopup = true;
    }
    async Task Save()
    {
        try
        {
            // Is this an existing user?
            if (seconddep.Id != 0)
            {
                SecondDeps secdep = await db.SecondDep.FindAsync(seconddep.Id);
                //...IG dont forget this one
                secdep.DepName = seconddep.DepName;
                secdep.Person = seconddep.Person;
                secdep.DepPhone = seconddep.DepPhone;
                secdep.DepEmail = seconddep.DepEmail;
                secdep.DepAddress = seconddep.DepAddress;
                await db.SaveChangesAsync();
            }
            else
            {
                //int maxId = db.SecondDep.Max(x => x.Id);
                // seconddep.Id = (maxId + 1);
                db.SecondDep.Add(seconddep);
                await db.SaveChangesAsync();
            }

            // Close the Popup
            ShowPopup = false;
            // Refresh Users
            LoadData();
            seconddep = new SecondDeps();
        }
        catch (Exception ex)
        {
            strError = ex.GetBaseException().Message;
        }
    }
    async Task Edit(SecondDeps secdep)
    {
        seconddep = secdep;
        //products = db.Products.Where(x => x.CategoryId == ).ToList();

        title = "Редактирование";
        ShowPopup = true;
    }
    async Task Delete(SecondDeps secdep)
    {
        // Close the Popup
        ShowPopup = false;
        // Get the user
        var obj = await db.SecondDep.FindAsync(secdep.Id);
        if (obj != null)
        {
            db.SecondDep.Remove(obj);
            await db.SaveChangesAsync();
        }
        LoadData();
    }

    void ClosePopup()
    {
        // Close the Popup
        ShowPopup = false;
    }

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = (await authenticationStateTask).User;
        objUser = await _userManager.FindByNameAsync(CurrentUser.Identity.Name);

        seconddep = new SecondDeps();
        LoadData();
    }

    public void LoadData()
    {

        //???...

        seconddeps = db.SecondDep.OrderBy(x => x.DepName).ToList();
        // initializers2 initializer= db.Initializers.OrderBy(x => x.PersonName).ToList(); double shit :)
    }



    private async Task Insert()
    {
        db.SecondDep.Add(seconddep);
        await db.SaveChangesAsync();
        seconddeps.Add(seconddep);
        seconddep = new SecondDeps();
    }
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();
    void Change(DateTime? value, string name, string format)
    {
        events.Add(DateTime.Now, $"{name} value changed to {value?.ToString(format)}");
        StateHasChanged();
    }
    bool CheckBox1Value;
    bool? CheckBox2Value;
    bool? CheckBox3Value = true;


    void Change(bool? value, string name)
    {
        events.Add(DateTime.Now, $"{name} value changed to {value}");
        StateHasChanged();
    }

}