@page "/userlist"
@using Microsoft.AspNetCore.Identity;
@using BlzMON.Models;
@using BlzMON.Data;
@inject ApplicationDbContext db;
@inject UserManager<ApplicationUser> _userManager;




<div class="row">
    <div class="col-md-4"></div>
    <div class="col-md-4"><h4>Пользователи</h4></div>
    <div class="col-md-4"></div>
</div>

<table class="table">
    <tr>
        <td><button class="btn btn-success" @onclick="AddNewUser">Добавить</button></td>
    </tr>
</table>

<RadzenGrid AllowFiltering="true" FilterCaseSensitivity="Radzen.FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="4" AllowSorting="true" Data="@users" TItem="ApplicationUser" ColumnWidth="150px">
    <Columns>
        <RadzenGridColumn TItem="ApplicationUser" Property="UserName" Title="Имя " />
        @*<RadzenGridColumn TItem="IdentityRole" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">*@
        <RadzenGridColumn TItem="ApplicationUser" Filterable="false" Sortable="false" TextAlign="Radzen.TextAlign.Center" Width="60px">
            <Template Context="user">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Click="@(() => EditUser(user))" />
            </Template>
        </RadzenGridColumn>


    </Columns>
</RadzenGrid>


@if (ShowPopup)
{


    <!-- This is the popup to create or edit a user -->
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">Редактирование</h3>
                    <!-- Button to close the popup -->
                    <button type="button" class="close"
                            @onclick="ClosePopup">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>
                <!-- Edit form for the current user -->
                <div class="modal-body">
                    <!-- Only show Id if not a new user -->
                    @if (objUser.Id != "")
                    {
                        <p>@objUser.Id</p>
                    }
                    <!-- Only allow edit if a new user -->
                    @if (objUser.Id != "")
                    {
                        <p>@objUser.UserName</p>
                    }
                    else
                    {
                        <input class="form-control" type="text"
                               placeholder="UserName"
                               @bind="objUser.UserName" />
                    }
                    <br />
                    <input class="form-control" type="text" placeholder="Email" @bind="objUser.Email" />
                    <br />
                    <input class="form-control" type="password" placeholder="Password" @bind="objUser.PasswordHash" />
                    <br />

                    <br /><br />
                    <!-- Button to save the user -->
                    <button class="btn btn-primary" @onclick="SaveUser">
                        Сохранить
                    </button>
                    <!-- Only show delete button if not a new record -->
                    @if (objUser.Id != "")
                    {
                        <!-- Button to delete the forecast -->
                        <button class="btn btn-danger" @onclick="DeleteUser">
                            Удалить
                        </button>
                    }
                    <br />
                    <span style="color:red">@strError</span>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string ADMINISTRATION_ROLE = "Admin";
    System.Security.Claims.ClaimsPrincipal CurrentUser;

    IdentityUser objUser = new IdentityUser();
    // Tracks the selected role for the currently selected user
    string CurrentUserRole { get; set; } = "Manager";
    int InitializerId = 0;
    // Collection to display the existing users
    // Options to display in the roles dropdown when editing a user
    //List<string> Options = new List<string>() { "Manager", "Member" };
    // To hold any possible errors
    string strError = "";
    // To enable showing the Popup
    bool ShowPopup = false;
    List<ApplicationUser> users = new List<ApplicationUser>();
    List<Initializers> initializers = new List<Initializers>();

    public void GetUsers()
    {
        // Collection to hold users
        users = new List<ApplicationUser>();
        // get users from _UserManager
        var user = _userManager.Users.Select(x => new ApplicationUser
        {
            Id = x.Id,
            UserName = x.UserName,
            //InitializerlsId = x.InitializerlsId,
            PasswordHash = "*****"
        });
        foreach (var item in user)
        {
            users.Add(item);
        }
    }

    void AddNewUser()
    {
        // Make new user
        objUser = new ApplicationUser();
        objUser.PasswordHash = "*****";
        // Set Id to blank so we know it is a new record
        objUser.Id = "";
        // Open the Popup
        ShowPopup = true;
    }
    async Task SaveUser()
    {
        try
        {
            // Is this an existing user?
            if (objUser.Id != "")
            {
                // Get the user
                var user = await _userManager.FindByIdAsync(objUser.Id);
                // Update Email
                user.Email = objUser.Email;
                //user.HospitalsId = HospitalId;//  HospitalId???
                //user.InitializerlsId = InitializerId;
                // Update the user
                await _userManager.UpdateAsync(user);
                // Only update password if the current value
                // is not the default value
                if (objUser.PasswordHash != "*****")
                {
                    var resetToken = await _userManager.GeneratePasswordResetTokenAsync(user);
                    var passworduser = await _userManager.ResetPasswordAsync(
                            user,
                            resetToken,
                            objUser.PasswordHash);
                    if (!passworduser.Succeeded)
                    {
                        if (passworduser.Errors.FirstOrDefault() != null)
                        {
                            strError = passworduser.Errors.FirstOrDefault().Description;
                        }
                        else
                        {
                            strError = "Pasword error";
                        }
                        // Keep the popup opened
                        return;
                    }
                }
                // Handle Roles // Is user in administrator role?
                var UserResult = await _userManager.IsInRoleAsync(user, ADMINISTRATION_ROLE);
                // Is Administrator role selected // but user is not an Administrator?
                if ((CurrentUserRole == ADMINISTRATION_ROLE) & (!UserResult))
                {
                    // Put admin in Administrator role
                    await _userManager.AddToRoleAsync(user, ADMINISTRATION_ROLE);
                }
                else
                {
                    await _userManager.AddToRoleAsync(user, CurrentUserRole);
                    //// Is Administrator role not selected // but user is an Administrator?
                    //if ((CurrentUserRole != ADMINISTRATION_ROLE) & (UserResult))
                    //{
                    //    // Remove user from Administrator role
                    //    await _userManager.RemoveFromRoleAsync(user, ADMINISTRATION_ROLE);
                    //}
                }
            }
            else
            {
                // Insert new user
                var NewUser = new ApplicationUser
                {
                    UserName = objUser.UserName,
                    Email = objUser.Email,
                    // InitializerlsId = InitializerId
                };
                var CreateResult = await _userManager.CreateAsync(NewUser, objUser.PasswordHash);
                if (!CreateResult.Succeeded)
                {
                    if (CreateResult.Errors.FirstOrDefault() != null)
                    {
                        strError = CreateResult.Errors.FirstOrDefault().Description;
                    }
                    else
                    {
                        strError = "Create error";
                    }
                    // Keep the popup opened
                    return;
                }
                else
                {
                    // Handle Roles
                    //if (CurrentUserRole == ADMINISTRATION_ROLE)
                    //{
                    // Put admin in Administrator role
                    await _userManager.AddToRoleAsync(NewUser, CurrentUserRole);
                    //}
                }
            }
            // Close the Popup
            ShowPopup = false;
            // Refresh Users
            GetUsers();
        }
        catch (Exception ex)
        {
            strError = ex.GetBaseException().Message;
        }
    }
    async Task EditUser(ApplicationUser _IdentityUser)
    {
        // Set the selected user as the current user
        objUser = _IdentityUser;
        // Get the user
        var user = await _userManager.FindByIdAsync(objUser.Id);
        if (user != null)
        {
            CurrentUserRole = "Manager";
            // Is user in administrator role?
            //var UserResult =await _userManager.IsInRoleAsync(user, ADMINISTRATION_ROLE);
            //if (UserResult)
            //{
            //    CurrentUserRole = ADMINISTRATION_ROLE;
            //}
            //else
            //{
            //    CurrentUserRole = "Manager";
            //}
        }
        // Open the Popup
        ShowPopup = true;
    }
    async Task DeleteUser()
    {
        // Close the Popup
        ShowPopup = false;
        // Get the user
        var user = await _userManager.FindByIdAsync(objUser.Id);
        if (user != null)
        {
            // Delete the user
            await _userManager.DeleteAsync(user);
        }
        // Refresh Users
        GetUsers();
    }
    void ClosePopup()
    {
        // Close the Popup
        ShowPopup = false;
    }


    protected override async Task OnInitializedAsync()
    {
        initializers = db.Initializers.ToList();
        GetUsers();
    }

}
