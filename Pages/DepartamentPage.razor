@page "/DepartamentPage"
@using Microsoft.AspNetCore.Identity;
@using BlzMON.Data
@using BlzMON.Models
@using Radzen
@using Radzen.Blazor
@using System.Data
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Mvc.Localization;
@using System.Collections.Generic;
@using System.Linq;
@using Microsoft.EntityFrameworkCore;
@inject UserManager<ApplicationUser> _userManager;
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@inject ApplicationDbContext db



<div class="row">
    <div class="col-md-4"></div>
    <div class="col-md-4"><h4>Учреждения</h4></div>
    <div class="col-md-4"></div>
</div>

<table class="table">
    <tr>
        <td width="30%"><button class="btn btn-success" @onclick="AddNew">Добавить</button></td>
    </tr>
</table>


<RadzenGrid AllowFiltering="true" FilterCaseSensitivity="Radzen.FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="4" AllowSorting="true" Data="@departaments" TItem="Departaments" ColumnWidth="150px">
    <Columns>
        <RadzenGridColumn TItem="Departaments" Property="Id" Title="ID" Width="40px" />
        <RadzenGridColumn TItem="Departaments" Property="Name" Title="Наименование " />
        <RadzenGridColumn TItem="Departaments" Property="InitPhone" Title="Телефон " Width="100px" />
        <RadzenGridColumn TItem="Departaments" Property="InitEmail" Title="Почта учреждения" Width="100px" />
        <RadzenGridColumn TItem="Departaments" Property="InitAddress" Title="Адрес учреждения" Width="100px" />
        <RadzenGridColumn TItem="Departaments" Property="Person" Title="Контактное лицо" />

        @*<RadzenGridColumn TItem="IdentityRole" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">*@
        <RadzenGridColumn TItem="Departaments" Filterable="false" Sortable="false" TextAlign="Radzen.TextAlign.Center" Width="60px">
            <Template Context="seconddep">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Click="@(args => Edit(departament))" />
            </Template>
        </RadzenGridColumn>
        <RadzenGridColumn TItem="Departaments" Filterable="false" Sortable="false" TextAlign="Radzen.TextAlign.Center" Width="60px">
            <Template Context="seconddep">
                <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Light" Click="@(args => Delete(departament))" />
            </Template>
        </RadzenGridColumn>

    </Columns>
</RadzenGrid>

@if (ShowPopup)
{
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content p-4">

                <div class="d-flex justify-content-between">
                    <div>
                        <p class="p-2">@title</p>
                    </div>
                    <div>
                        <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Click="@ClosePopup" />
                    </div>

                </div>
                <br />
                <div class="form-group">
                    <label for="e1" class="p-2 font-weight-bold">Наименование департамента</label>
                    <input type="text" class="form-control" id="e1" @bind="@departament.Name">
                    <label for="e1" class="p-2 font-weight-bold"> Телефон департамента </label>
                    <input type="text" class="form-control" id="e1" @bind="@departament.InitPhone">
                    <label for="e1" class="p-2 font-weight-bold">Почта департамента</label>
                    <input type="text" class="form-control" id="e1" @bind="@departament.InitEmail">
                    <label for="e1" class="p-2 font-weight-bold">Адрес департамента</label>
                    <input type="text" class="form-control" id="e1" @bind="@departament.InitAddress">
                    <label for="e1" class="p-2 font-weight-bold">Контактное лицо</label>
                    <input type="text" class="form-control" id="e1" @bind="@departament.Person">

                </div>
                <br />
                <div class="d-flex justify-content-center p-1">
                    <button class="btn btn-sm btn-primary" @onclick="Save">
                        Сохранить
                    </button>
                </div>
            </div>


        </div>
    </div>}



@code { private int CurrentValue { get; set; }
    public string itemValue { get; set; }
    public string item
    {
        get { return itemValue; }
        set
        {
            CurrentValue = departaments.Count();
            if (value.Length > 0)
            {
                departaments = departaments2.Where(x => x.Person.ToLower().Contains(value)).ToList();//wtf
            }
            else
            {
                departaments = departaments2;
            }
            itemValue = value;
        }
    }
    private List<Departaments> departaments = new List<Departaments>();
    private List<Departaments> departaments2;
    private Departaments departament = new Departaments();

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    System.Security.Claims.ClaimsPrincipal CurrentUser;

    ApplicationUser objUser;
    string strError = "";
    string title = "";
    bool ShowPopup = false;


    void AddNew()
    {
        departament = new Departaments();
        //initializer.Code = "Test";   // What is it? double shit :0
        departament.Id = 0;
        ShowPopup = true;
    }
    async Task Save()
    {
        try
        {
            // Is this an existing user?
            if (departament.Id != 0)
            {
                Departaments depart = await db.Departaments.FindAsync(departament.Id);

                //...IG dont forget this one
                depart.Name = departament.Name;
                depart.Person = departament.Person;
                depart.InitPhone = departament.InitPhone;
                depart.InitEmail = departament.InitEmail;
                depart.InitAddress = departament.InitAddress;
                depart.Person = departament.Person;
                await db.SaveChangesAsync();
            }
            else
            {
                // int maxId = db.Departaments.Max(x => x.Id);
                //departament.Id = (maxId + 1);
                db.Departaments.Add(departament);
                await db.SaveChangesAsync();
            }

            // Close the Popup
            ShowPopup = false;
            // Refresh Users
            LoadData();
            departament = new Departaments();
        }
        catch (Exception ex)
        {
            strError = ex.GetBaseException().Message;
        }
    }
    async Task Edit(Departaments depart)
    {
        departament = depart;
        //products = db.Products.Where(x => x.CategoryId == ).ToList();
        ShowPopup = true;
    }
    async Task Delete(Departaments depart)
    {
        // Close the Popup
        ShowPopup = false;
        // Get the user
        var obj = await db.Departaments.FindAsync(departament.Id);
        if (obj != null)
        {
            db.Departaments.Remove(obj);
            await db.SaveChangesAsync();
        }
        LoadData();
    }
    void ClosePopup()
    {
        // Close the Popup
        ShowPopup = false;
    }

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = (await authenticationStateTask).User;
        objUser = await _userManager.FindByNameAsync(CurrentUser.Identity.Name);

        departament = new Departaments();
        LoadData();
    }

    public void LoadData()
    {
        departaments = db.Departaments.OrderBy(x => x.Person).ToList();
        // initializers2 initializer= db.Initializers.OrderBy(x => x.PersonName).ToList(); double shit :)
    }



    private async Task Insert()
    {
        db.Departaments.Add(departament);
        await db.SaveChangesAsync();
        departaments.Add(departament);
        departament = new Departaments();
    } 
}