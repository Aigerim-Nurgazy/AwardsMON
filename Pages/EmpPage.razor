@page "/emppage"

@using Microsoft.AspNetCore.Identity;
@using HospitalsBlz.Data
@using HospitalsBlz.Models
@inject UserManager<ApplicationUser> _userManager;


@inject ApplicationDbContext db

<div class="row">
    <div class="col-md-4"></div>
    <div class="col-md-4"><h4>Список сотрудников </h4></div>
    <div class="col-md-4"></div>
</div>
<button class="btn btn-success" @onclick="AddNewUser">Добавить новый</button>
<table class="table table-striped">
    <thead>
        <tr>
            <th>ФИО</th>
            <th>Должность</th>
            <th>Примечание</th>
            <td></td>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in emps)
        {
            <tr>
                <td>@item.Name</td>
                <td>@item.Positions.Name</td>
                <td>@item.Desc</td>
                <td>
                    <!-- Edit the current forecast -->
                    <button class="btn btn-primary"
                            @onclick="(() => EditUser(item))">
                        Редактировать
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>

@if (ShowPopup)
{
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">Редактирование</h3>
                    <button type="button" class="close"
                            @onclick="ClosePopup">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>
                <div class="modal-body">
                    <span style="color:red">@strError</span>
                    <table class="table">
                        <tr>
                            <td>ФИО</td>
                            <td><input type="text" class="form-control" @bind="@emp.Name" /></td>
                        </tr>
                        <tr>
                            <td>Должность</td>
                            <td>
                                <select class="form-control" @bind="@emp.PositionsId">
                                    @foreach (var cnt in positions)
                                    {
                                        <option value="@cnt.Id">@cnt.Name</option>
                                    }
                                </select>
                            </td>
                        </tr>
                        <tr>
                            <td>Примечание</td>
                            <td><input type="text" class="form-control" @bind="@emp.Desc" /></td>
                        </tr>
                        <tr>
                            <td>
                                @if (emp.Id != 0)
                                {
                                    <!-- Button to delete the forecast -->
                                    <button class="btn btn-danger" @onclick="DeleteUser">
                                        Удалить
                                    </button>
                                }
                            </td>
                            <td>
                                <button class="btn btn-primary" @onclick="SaveUser">
                                    Сохранить
                                </button>
                            </td>
                        </tr>
                    </table>
                </div>
            </div>

        </div>
    </div>
}



@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    System.Security.Claims.ClaimsPrincipal CurrentUser;

    ApplicationUser objUser;
    string strError = "";
    bool ShowPopup = false;

    private List<Emp> emps = new List<Emp>();
    private List<Positions> positions = new List<Positions>();
    private Emp emp = new Emp();

    void AddNewUser()
    {
        emp = new Emp();
        emp.CreateDate = DateTime.Now;
        emp.ApplicationUserId = objUser.Id;
        emp.HospitalsId = objUser.HospitalsId;
        emp.Id = 0;
        ShowPopup = true;
    }
    async Task SaveUser()
    {
        try
        {
            // Is this an existing user?
            if (emp.Id != 0)
            {
                Emp employee = await db.Emp.FindAsync(emp.Id);
                employee.Name = emp.Name;
                employee.Desc = emp.Desc;
                employee.PositionsId = emp.PositionsId;
                await db.SaveChangesAsync();
            }
            else
            {
                db.Emp.Add(emp);
                await db.SaveChangesAsync();
            }

            // Close the Popup
            ShowPopup = false;
            // Refresh Users
            LoadData();
            emp = new Emp();
        }
        catch (Exception ex)
        {
            strError = ex.GetBaseException().Message;
        }
    }
    async Task EditUser(Emp rc)
    {
        emp = rc;
        //products = db.Products.Where(x => x.CategoryId == ).ToList();
        ShowPopup = true;
    }
    async Task DeleteUser()
    {
        // Close the Popup
        ShowPopup = false;
        // Get the user
        var rc = await db.Emp.FindAsync(emp.Id);
        if (rc != null)
        {
            db.Emp.Remove(rc);
            await db.SaveChangesAsync();
        }
        LoadData();
    }
    void ClosePopup()
    {
        // Close the Popup
        ShowPopup = false;
    }

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = (await authenticationStateTask).User;
        objUser = await _userManager.FindByNameAsync(CurrentUser.Identity.Name);
        positions = db.Positions.ToList();
        emp = new Emp();
        LoadData();
    }

    public void LoadData()
    {
        emps= db.Emp.Where(x => x.ApplicationUserId == objUser.Id).ToList();
    }
}
