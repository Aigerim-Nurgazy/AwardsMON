@page "/comissionpage"@using Microsoft.AspNetCore.Identity;@using BlzMON.Data@using BlzMON.Models@using Radzen.Blazor;@inject UserManager<ApplicationUser> _userManager;@inject ApplicationDbContext db<div class="row">    <div class="col-md-4"></div>    <div class="col-md-4"><h4>Комиссии</h4></div>    <div class="col-md-4"></div></div><table class="table">    <tr>        <td><button class="btn btn-success" @onclick="AddNew">Добавить</button></td>    </tr></table><RadzenGrid AllowFiltering="true" FilterCaseSensitivity="Radzen.FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="4" AllowSorting="true" Data="@сonclusions" TItem="Commissions" ColumnWidth="150px">    <Columns>        <RadzenGridColumn TItem="Commissions" Property="Person" Title="Член комиссии"></RadzenGridColumn>        @*<RadzenGridColumn TItem="IdentityRole" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">*@        <RadzenGridColumn TItem="Commissions" Filterable="false" Sortable="false" TextAlign="Radzen.TextAlign.Center" Width="40px">            <Template Context="сonclusion">                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Click="@(args => Edit(сonclusion))" />            </Template>        </RadzenGridColumn>        <RadzenGridColumn TItem="Commissions" Filterable="false" Sortable="false" TextAlign="Radzen.TextAlign.Center" Width="40px">            <Template Context="сonclusion">                <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Light" Click="@(args => Delete(сonclusion))" />            </Template>        </RadzenGridColumn>    </Columns></RadzenGrid>@if (ShowPopup){<div class="modal" tabindex="-1" style="display:block" role="dialog">    <div class="modal-dialog">        <div class="modal-content p-4">            <div class="d-flex justify-content-between">                <div>                    <p class="p-2">@title</p>                </div>                <div>                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Click="@ClosePopup" />                </div>            </div>            <br />            <div class="form-group">                <label for="e1" class="p-2 font-weight-bold">Комиссия</label>                <input type="text" class="form-control" id="e1" @bind="@сonclusion.Person" placeholder="Комиссия">            </div>            <br />            <div class="d-flex justify-content-center p-1">                <button class="btn btn-sm btn-primary" @onclick="Save">                    Сохранить                </button>            </div>        </div>    </div></div>}@code { private List<Commissions> сonclusions = new List<Commissions>();    private Commissions сonclusion = new Commissions();    [CascadingParameter]    private Task<AuthenticationState> authenticationStateTask { get; set; }    System.Security.Claims.ClaimsPrincipal CurrentUser;    ApplicationUser objUser;    string strError = "";    string title = "";    bool ShowPopup = false;    void AddNew()    {        сonclusion = new Commissions();        сonclusion.Id = 0;        title = "Новая запись";        ShowPopup = true;    }    async Task Save()    {        try        {            if (сonclusion.Id != 0)            {                Commissions lt = await db.Commission.FindAsync(сonclusion.Id);                lt.Id = сonclusion.Id;                lt.Person = сonclusion.Person;                await db.SaveChangesAsync();            }            else            {                db.Commission.Add(сonclusion);                await db.SaveChangesAsync();            }            ShowPopup = false;            LoadData();        }        catch (Exception ex)        {            strError = ex.GetBaseException().Message;        }    }    async Task Edit(Commissions lt)    {        title = "Редактирование";        сonclusion = lt;        ShowPopup = true;    }    async Task Delete(Commissions lt)    {        ShowPopup = false;        var obj = await db.Commission.FindAsync(lt.Id);        if (obj != null)        {            db.Commission.Remove(obj);            await db.SaveChangesAsync();        }        LoadData();    }    void ClosePopup()    {        ShowPopup = false;    }    protected override async Task OnInitializedAsync()    {        // CurrentUser = (await authenticationStateTask).User;        // objUser = await _userManager.FindByNameAsync(CurrentUser.Identity.Name);        LoadData();    }    public void LoadData()    {        сonclusion = new Commissions();        сonclusions = db.Commission.OrderBy(x => x.Person).ToList();    }}