@page "/comissionpage"

@using Microsoft.AspNetCore.Identity;
@using BlzMON.Data
@using BlzMON.Models
@using Radzen.Blazor;
@inject UserManager<ApplicationUser> _userManager;

@inject ApplicationDbContext db


<h3>Комиссии</h3>
<button class="btn btn-success" @onclick="AddNew">Добавить новый</button>
<RadzenGrid AllowFiltering="true" FilterCaseSensitivity="Radzen.FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="4"
            AllowSorting="true" Data="@сonclusions" TItem="Commissions" ColumnWidth="150px">
    <Columns>
        <RadzenGridColumn TItem="Commissions" Property="Person" Title="Член комиссии"></RadzenGridColumn>

        @*<RadzenGridColumn TItem="IdentityRole" Bubble="false" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">*@
        <RadzenGridColumn TItem="Commissions" TextAlign="Radzen.TextAlign.Center" Width="60px">
            <Template Context="сonclusion">
                <RadzenButton Icon="edit" Click="@(args => Edit(сonclusion))" />
            </Template>
        </RadzenGridColumn>
        <RadzenGridColumn TItem="Commissions" TextAlign="Radzen.TextAlign.Center" Width="60px">
            <Template Context="сonclusion">
                <RadzenButton Icon="delete" Click="@(args => Delete(сonclusion))" />
            </Template>
        </RadzenGridColumn>

    </Columns>
</RadzenGrid>


@if (ShowPopup)
{
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">@title</h3>
                    <button type="button" class="close"
                            @onclick="ClosePopup">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>
                <div class="modal-body">
                    <span style="color:red">@strError</span>
                    <table class="table">
                   
                        <tr>
                            <td>Член комиссии</td>
                            <td><input type="text" class="form-control" @bind="@сonclusion.Person" /></td>
                        </tr>

                        <tr>
                            <td>
                                <button class="btn btn-primary" @onclick="Save">
                                    Сохранить
                                </button>
                            </td>
                            <td></td>
                        </tr>
                    </table>
                </div>
            </div>

        </div>
    </div>
}


@code {

    private List<Commissions> сonclusions = new List<Commissions>();

    private Commissions сonclusion = new Commissions();

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    System.Security.Claims.ClaimsPrincipal CurrentUser;

    ApplicationUser objUser;
    string strError = "";
    string title = "";
    bool ShowPopup = false;


    void AddNew()
    {
        сonclusion = new Commissions();
        сonclusion.Id = 0;
        title = "Новая запись";
        ShowPopup = true;
    }
    async Task Save()
    {
        try
        {
            if (сonclusion.Id != 0)
            {
                Commissions lt = await db.Commission.FindAsync(сonclusion.Id);
                lt.Id = сonclusion.Id;
                lt.Person = сonclusion.Person;
                await db.SaveChangesAsync();
            }
            else
            {
                db.Commission.Add(сonclusion);
                await db.SaveChangesAsync();
            }

            ShowPopup = false;
            LoadData();
        }
        catch (Exception ex)
        {
            strError = ex.GetBaseException().Message;
        }
    }
    async Task Edit(Commissions lt)
    {
        title = "Редактирование";
        сonclusion = lt;
        ShowPopup = true;
    }
    async Task Delete(Commissions lt)
    {
        ShowPopup = false;
        var obj = await db.Commission.FindAsync(lt.Id);
        if (obj != null)
        {
            db.Commission.Remove(obj);
            await db.SaveChangesAsync();
        }
        LoadData();
    }
    void ClosePopup()
    {
        ShowPopup = false;
    }

    protected override async Task OnInitializedAsync()
    {
        // CurrentUser = (await authenticationStateTask).User;
        // objUser = await _userManager.FindByNameAsync(CurrentUser.Identity.Name);
        LoadData();
    }

    public void LoadData()
    {
        сonclusion = new Commissions();
        сonclusions = db.Commission.OrderBy(x => x.Person).ToList();

    }


}
