@page "/OrderPage"
@using Microsoft.AspNetCore.Identity;
@using BlzMON.Data
@using BlzMON.Models
@using Radzen
@using System.Data
@using System.Threading.Tasks

@inject UserManager<ApplicationUser> _userManager;

@inject ApplicationDbContext db



<div class="row">
    <div class="col-md-4"></div>
    <div class="col-md-4"><h4>Приказы</h4></div>
    <div class="col-md-4"></div>
</div>

<table class="table">
    <tr>
        <td width="30%"><input @bind-value="@item" placeholder="Поиск" class="form-control" @bind-value:event="oninput" /></td>
        <td width="40%"></td>
        <td width="30%"><button class="btn btn-success" @onclick="AddNew">Добавить новый</button></td>
    </tr>
</table>


<table class="table table-striped">
    <thead>
        <tr>
            <th>ID</th>
            <th>Инициатор </th>
            <th>Область</th>
            <th>Награда</th>
            <th>Должность</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in orders)
        {
            <tr>
                <td>@item.Id</td>
                <td>@item.Person.PersonSurname</td>
                <td>@item.Areak.AreaName</td>
                <td>@item.Award.AwardName</td>
                <td>@item.Possition.PossName</td>
                <td>
                    <!-- Edit the current forecast -->
                    <button class="btn btn-primary"
                            @onclick="(() => Edit(item))">
                        Редактировать
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>


@if (ShowPopup)
{
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">Редактирование</h3>
                    <button type="button" class="close"
                            @onclick="ClosePopup">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>
                <div class="modal-body">
                    <span style="color:red">@strError</span>
                    <table class="table">

                        <tr>
                            <td>Инициатор</td>
                            <td>
                                <select class="form-control" @bind="order.InitializersId">
                                    @foreach (var cnt in initializers)
                                    {
                                        <option value="@cnt.Id">@cnt.PersonSurname</option>
                                    }
                                </select>
                            </td>
                        </tr>

                        <tr>
                            <td>Область</td>
                            <td>
                                <select class="form-control" @bind="@order.AreassId">
                                    @foreach (var cnt in areas)
                                    {
                                        <option value="@cnt.Id">@cnt.AreaName</option>
                                    }
                                </select>
                            </td>
                        </tr>

                        <tr>
                            <td>Награды</td>
                            <td>
                                <select class="form-control" @bind="@order.AwardsId">
                                    @foreach (var cnt in awards)
                                    {
                                        <option value="@cnt.Id">@cnt.AwardName</option>
                                    }
                                </select>
                            </td>
                        </tr>

                        <tr>
                            <td>Должность</td>
                            <td>
                                <select class="form-control" @bind="@order.PossitionsId">
                                    @foreach (var cnt in possitions)
                                    {
                                        <option value="@cnt.Id">@cnt.PossName</option>
                                    }
                                </select>
                            </td>
                        </tr>

                        <tr>
                            <td>
                                @if (order.Id != 0)
                                {
                                    <!-- Button to delete the forecast -->
                                    <button class="btn btn-danger" @onclick="Delete">
                                        Удалить
                                    </button>
                                }
                            </td>
                            <td>
                                <button class="btn btn-primary" @onclick="Save">
                                    Сохранить
                                </button>
                            </td>
                        </tr>
                    </table>
                </div>
            </div>

        </div>
    </div>
}



@code {

    List<Possitions> possitions = new List<Possitions>();
    List<Educations> educations = new List<Educations>();
    List<Areass> areas = new List<Areass>();
    //List<Regions> regions = new List<Regions>();
    // List<Documents> documents = new List<Documents>();
    List<Initializers> initializers = new List<Initializers>();
    List<Awards> awards = new List<Awards>();
    private int CurrentValue { get; set; }
    public string itemValue { get; set; }
    public string item
    {
        get { return itemValue; }
        set
        {
            CurrentValue = orders.Count();
            if (value.Length > 0)
            {
                orders = orders2.Where(x => x.Areak.AreaName.ToLower().Contains(value)).ToList();//wtf
            }
            else
            {
                orders = orders2;
            }
            itemValue = value;
        }
    }
    private List<Orders> orders = new List<Orders>();
    private List<Orders> orders2;
    private Orders order = new Orders();

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    System.Security.Claims.ClaimsPrincipal CurrentUser;

    ApplicationUser objUser;
    string strError = "";
    bool ShowPopup = false;


    void AddNew()
    {
        order = new Orders();
        order.Id = 0;
        ShowPopup = true;
        possitions = db.Possition.ToList();
        educations = db.Education.ToList();
        areas = db.Areaq.ToList();
        initializers = db.Initializers.ToList();
        awards = db.Award.ToList();
        //regions = db.Region.ToList();
    }
    async Task Save()
    {
        try
        {
            // Is this an existing user?
            if (order.Id != 0)
            {
                Orders secdep = await db.Order.FindAsync(order.Id);

                //...IG dont forget this one

                await db.SaveChangesAsync();
            }
            else
            {
                //  int maxId = db.Order.Max(x => x.Id);
                //  order.Id = (maxId + 1);
                db.Order.Add(order);
                await db.SaveChangesAsync();
            }

            // Close the Popup
            ShowPopup = false;
            // Refresh Users
            LoadData();
            order = new Orders();
        }
        catch (Exception ex)
        {
            strError = ex.GetBaseException().Message;
        }
    }
    async Task Edit(Orders rc)
    {
        order = rc;
        //products = db.Products.Where(x => x.CategoryId == ).ToList();
        ShowPopup = true;
    }
    async Task Delete()
    {
        // Close the Popup
        ShowPopup = false;
        // Get the user
        var rc = await db.Order.FindAsync(order.Id);
        if (rc != null)
        {
            db.Order.Remove(rc);
            await db.SaveChangesAsync();
        }
        LoadData();
    }
    void ClosePopup()
    {
        // Close the Popup
        ShowPopup = false;
    }

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = (await authenticationStateTask).User;
        objUser = await _userManager.FindByNameAsync(CurrentUser.Identity.Name);

        order = new Orders();
        LoadData();
    }

    public void LoadData()
    {
        orders = db.Order.OrderBy(x => x.Areak).ToList();
    }
    private async Task Insert()
    {
        db.Order.Add(order);
        await db.SaveChangesAsync();
        orders.Add(order);
        order = new Orders();
    }

}
