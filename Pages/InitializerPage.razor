@page "/InitializerPage"
@using Microsoft.AspNetCore.Identity;
@using BlzMON.Data
@using BlzMON.Models
@using System.Threading.Tasks
@using BlazorInputFile
@using Radzen
@using Radzen.Blazor
@using System.Data
@using Microsoft.AspNetCore.Mvc.Localization;
@using Microsoft.AspNetCore.Localization;
@using BlzMON.Controllers
@using System.IO;
@using System.Linq;
@using System.Collections.Generic;
@using System;
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
@using Microsoft.EntityFrameworkCore;
@using BlazorInputFile

@inject IViewLocalizer Localizer
@inject UserManager<ApplicationUser> _userManager;
@inject ApplicationDbContext db
@inject BlzMON.Services.PostFiles postFiles

@if (!ShowPopup)
{

    <div class="row">
        <div class="col-md-4"></div>
        <div class="col-md-4"><h4>Список инициаторов</h4></div>
        <div class="col-md-4"></div>
    </div>

    <table class="table">
        <tr>
            <td><button class="btn btn-success" @onclick="AddNew">Добавить</button></td>
        </tr>
    </table>

    @* List of initiators datagrid *@
    @*<RadzenGrid Data="@initializers"
                    AllowFiltering="true" AllowPaging="true" AllowSorting="true" StartsWithText="Поиск" TItem="Initializers" ColumnWidth="200px">
            <Columns>
                <RadzenGridColumn Width="90px" TextAlign="TextAlign.Center" TItem="Initializers" Property="Id" Title="ID" />


                <RadzenGridColumn Width="150px" TItem="Initializers" Property="Areak.AreaName" Title="Область" />
                <RadzenGridColumn Width="150px" TItem="Initializers" Property="GetFullName" Title="ФИО" />
                <RadzenGridColumn Width="150px" TItem="Initializers" Property="Possition.PossName" Title="Должность" />
                <RadzenGridColumn Width="150px" TItem="Initializers" Property="Education.EduName" Title="Образование" />
                <RadzenGridColumn Width="150px" TItem="Initializers" Property="WorkExpierence" Title="Опыт" />
                <RadzenGridColumn Width="150px" TItem="Initializers" Property="Areak.AreaName" Title="Область" />
                <RadzenGridColumn Width="150px" TItem="Initializers" Property="DateOfBirth" Title="Дата рождения" />
                <RadzenGridColumn Width="150px" TItem="Initializers" Property="CellPhone" Title="Телефон" />
                <RadzenGridColumn Width="150px" TItem="Initializers" Property="EmailAddress" Title="E-почта" />
                <RadzenGridColumn Width="150px" TItem="Initializers" Property="PersonAddress" Title="Адрес" />
                <RadzenGridColumn Width="150px" TItem="Initializers" Property="Award.AwardName" Title="Награда" />
                <RadzenGridColumn Width="150px" TItem="Initializers" Property="Orders.OrderName" Title="Приказ" />


                <RadzenGridColumn Width="60px" TextAlign="TextAlign.Center"  TItem="Initializers">
                    <Template Context="initializer">
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light"  Click="@(args => Edit(initializer))" />
                    </Template>
                </RadzenGridColumn>
            </Columns>
        </RadzenGrid>*@

    <div class="overflow-auto">
        <table class="table">
            <thead>
                <tr>
                    <th class="text-center">ID</th>
                    <th class="text-center">ФИО</th>
                    <th class="text-center">Должность</th>
                    <th class="text-center">Образование</th>
                    <th class="text-center">Стаж работы</th>
                    <th class="text-center">Область</th>
                    <th class="text-center">Дата рождения</th>
                    <th class="text-center">Телефон</th>
                    <th class="text-center">Почта</th>
                    <th class="text-center">Адрес</th>
                    <th class="text-center">На награду</th>
                    <th class="text-center">Приказ</th>
                    <th class="text-center"></th>
                    <th class="text-center"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in initializers)
                {
                    <tr>
                        <td class="text-center">@item.Id</td>
                        <td class="text-center">@item.PersonSurname<br>@item.PersonName<br />@item.PersonPatronymic</td>
                        <td class="text-center">@item.Possition.PossName</td>
                        <td class="text-center">@item.Education.EduName</td>
                        <td class="text-center">@item.WorkExpierence</td>
                        <td class="text-center">@item.Areak.AreaName</td>
                        <td class="text-center">@item.DateOfBirth</td>
                        <td class="text-center">@item.CellPhone</td>
                        <td class="text-center">@item.EmailAddress</td>
                        <td class="text-center">@item.PersonAddress</td>
                        <td class="text-center">@item.Award.AwardName</td>
                        <td class="text-center">
                            @if (item.Orders != null)
                            {@item.Orders.OrderName}
                        </td>
                        <td>
                            <RadzenDropDown TValue="string" AllowFiltering="false" 
                                            Context="item" Placeholder="Файлы" 
                                            Data="@GetFileNames(item)" Style="width:170px;"
                                            TextProperty="Name" ValueProperty="Id" />
                        </td>

                        <td class="text-center">
                            <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Secondary" Click="@(() => Edit(item))" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>



    </div>
}

@if (ShowPopup)
{
    <div class="row">
        <div class="col-md-4"></div>
        <div class="col-md-4"><h4>Редактирование</h4></div>
        <div class="col-md-4"></div>
    </div>
    <table class="table">


        <tr>
            <td class="text-center font-weight-bold">Фамилия</td>
            <td><input type="text" class="form-control" @bind="@initializer.PersonSurname" /></td>
        </tr>

        <tr>
            <td class="text-center font-weight-bold">Имя</td>
            <td><input type="text" class="form-control" @bind="@initializer.PersonName" /></td>
        </tr>
        <tr>
            <td class="text-center font-weight-bold">Отчество</td>
            <td><input type="text" class="form-control" @bind="@initializer.PersonPatronymic" /></td>
        </tr>

        <tr>
            <td class="text-center font-weight-bold">Должность</td>
            <td>
                <select class="form-control" @bind="@initializer.PossitionsId">
                    @foreach (var cnt in possitions)
                    {
                        <option value="@cnt.Id">@cnt.PossName</option>
                    }
                </select>
            </td>
        </tr>

        <tr>
            <td class="text-center font-weight-bold">Образование</td>
            <td>
                <select class="form-control" @bind="@initializer.EducationsId">
                    @foreach (var cnt in educations)
                    {
                        <option value="@cnt.Id">@cnt.EduName</option>
                    }
                </select>
            </td>
        </tr>

        <tr>
            <td class="text-center font-weight-bold">Опыт</td>
            <td><input type="text" class="form-control" @bind="@initializer.WorkExpierence" /></td>
        </tr>


        <tr>
            <td class="text-center font-weight-bold">Область</td>
            <td>
                <select class="form-control" @bind="@initializer.AreassId">
                    @foreach (var cnt in areas)
                    {
                        <option value="@cnt.Id">@cnt.AreaName</option>
                    }
                </select>
            </td>
        </tr>


        <tr>
            <td class="text-center font-weight-bold">Дата рождения</td>
            <td><RadzenDatePicker @bind-Value="initializer.DateOfBirth" DateFormat="d" ShowTime="false" Change="@(args => Change(args, "DatePicker", "MM/dd/yyyy"))" /></td>

        </tr>
        <tr>
            <td class="text-center font-weight-bold">Телефон</td>
            <td><input type="text" class="form-control" @bind="@initializer.CellPhone" /></td>
        </tr>

        <tr>
            <td class="text-center font-weight-bold">Почта</td>
            <td><input type="text" class="form-control" @bind="@initializer.EmailAddress" /></td>
        </tr>
        <tr>
            <td class="text-center font-weight-bold">Адрес</td>
            <td><input type="text" class="form-control" @bind="@initializer.PersonAddress" /></td>
        </tr>
        <tr>
            <td class="text-center font-weight-bold">На награду</td>
            <td>
                <select class="form-control" @bind="@initializer.AwardsId">
                    @foreach (var cnt in awards)
                    {
                        <option value="@cnt.Id">@cnt.AwardName</option>
                    }
                </select>
            </td>
        </tr>
        <tr>
            <td></td>
            <td class="text-success">
                Для выбора нескольких файлов удерживайте клавищу CTRL
            </td>
        </tr>
        <tr>
            <td class="text-center font-weight-bold">Личное заявление</td>
            <td class="text-center">
                @*<RadzenUpload Multiple="true" Url="InitializerPage/MultipleA" ChooseText="Выберите файлы" Progress="@((args) => OnProgress(args, "A"))" />*@
                @*<br />*@

                <InputFile OnChange="@((args) => HandleSelection(args, "A"))" Multiple="true" />
                <br />
        <tr>
            <td class="text-left col-5 text-success">
                @fileNamesA
            </td>
        </tr>
        </td>
        </tr>
        <tr>
            <td class="text-center font-weight-bold">Представление руководителя<br /> образовательной организации</td>
            <td class="text-center">
                @*<RadzenUpload Multiple="true" Url="InitializerPage/MultipleB" ChooseText="Выберите файлы" Progress="@((args) => OnProgress(args, "A"))" />*@
                @*<br />*@

                <InputFile OnChange="@((args) => HandleSelection(args, "B"))" Multiple="true" />
                <br />
        <tr>
            <td class="text-left col-5 text-success">
                @fileNamesB
            </td>
        </tr>
        </td>
        </tr>
        <tr>
            <td class="text-center font-weight-bold">
                Копия трудовой книжки
            </td>
            <td class="text-center">
                @*<RadzenUpload Multiple="true" Url="InitializerPage/MultipleC" ChooseText="Выберите файлы" Progress="@((args) => OnProgress(args, "A"))" />*@
                @*<br />*@

                <InputFile OnChange="@((args) => HandleSelection(args, "C"))" Multiple="true" />
                <br />
        <tr>
            <td class="text-left col-5 text-success">
                @fileNamesC
            </td>
        </tr>
        </td>
        </tr>
        <tr>
            <td class="text-center font-weight-bold">
                Копии наград
            </td>
            <td class="text-center">
                @*<RadzenUpload Multiple="true" Url="InitializerPage/MultipleD" ChooseText="Выберите файлы" Progress="@((args) => OnProgress(args, "A"))" />*@
                @*<br />*@

                <InputFile OnChange="@((args) => HandleSelection(args, "D"))" Multiple="true" />
                <br />
        <tr>
            <td class="text-left col-5 text-success">
                @fileNamesD
            </td>
        </tr>
        </td>
        </tr>
        <tr>
            <td class="text-center font-weight-bold">Выписка из решения педагогического<br /> или ученого совета</td>
            <td class="text-center">
                @*<RadzenUpload Multiple="true" Url="InitializerPage/MultipleE" ChooseText="Выберите файлы" Progress="@((args) => OnProgress(args, "A"))" />*@
                @*<br />*@

                <InputFile OnChange="@((args) => HandleSelection(args, "E"))" Multiple="true" />
                <br />
        <tr>
            <td class="text-left col-5 text-success">
                @fileNamesE
            </td>
        </tr>
        </td>
        </tr>

        @*<tr>
                <td>Загрузка...</td>
                <RadzenCard Style="overflow:auto;">
                    <RadzenProgressBar Value="@progress" Unit="@info" Vissible="@(progress>0)" Style="margin-bottom:20px;"></RadzenProgressBar>
                </RadzenCard>
            </tr>*@
    </table>


    <div class="d-flex justify-content-center">
        <div class="p-1">
            <button class="btn btn-primary" @onclick="Save">
                Сохранить
            </button>
        </div>
        <div class="p-1">
            @if (initializer.Id != 0)
            {<!-- Button to delete the forecast -->
                <button class="btn btn-danger" @onclick="Delete">
                    Удалить
                </button>}
        </div>
        <div class="p-1">
            <button class="btn btn-light" @onclick="ClosePopup">
                Назад
            </button>
        </div>
    </div>

    <br />
    <br />
    <br />

    <div>
        <ul>
            <b>
                При подаче электронной заявки на регистрацию
                должны быть в обязательном порядке прикреплены
                следующие документы в сканированном варианте или в форме фотокопии
            </b>
            <li>Личное заявление</li>
            <li>Представление руководителя образовательной  организации</li>
            <li>
                Копия трудовой книжки, заверенная печатью отдела кадров
                государственного органа,
                где обсуждалась кандидатура для награждения
            </li>
            <li>
                Копии наград, заверенные печатью отдела кадров
                государственного органа,
                где обсуждалась кандидатура для награждения
            </li>
            <li>Выписка из решения педагогического или ученого совета</li>
        </ul>
    </div>
    <br />
    <br />
    <br />
}

@code {

    // files types A, B, C, D, E
    public IFileListEntry[][] allFiles = new IFileListEntry[5][];


    public string fileNamesA = "";
    public string fileNamesB = "";
    public string fileNamesC = "";
    public string fileNamesD = "";
    public string fileNamesE = "";

    // Initialize all files array and display files names
    void HandleSelection(IFileListEntry[] files, string fileTypeName)
    {

        string fileNames = "";

        foreach (var file in files)
        {
            fileNames += file.Name + ", ";
        }

        if (fileTypeName == "A") { allFiles[0] = files; fileNamesA = fileNames; }
        if (fileTypeName == "B") { allFiles[1] = files; fileNamesB = fileNames; }
        if (fileTypeName == "C") { allFiles[2] = files; fileNamesC = fileNames; }
        if (fileTypeName == "D") { allFiles[3] = files; fileNamesD = fileNames; }
        if (fileTypeName == "E") { allFiles[4] = files; fileNamesE = fileNames; }
    }


    //
    public List<Initializers> initializers = new List<Initializers>();
    public Initializers initializer = new Initializers();

    // Where to use? can remove?
    List<Possitions> possitions = new List<Possitions>();
    List<Educations> educations = new List<Educations>();
    List<Areass> areas = new List<Areass>();
    List<Awards> awards = new List<Awards>();
    //List<Regions> regions = new List<Regions>();
    //List<Initializers> initializers = new List<Initializers>();
    // List<Documents> documents = new List<Documents>();
    // Initializers initializer = new Initializers();


    // Auth
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    System.Security.Claims.ClaimsPrincipal CurrentUser;

    // What is it?
    ApplicationUser objUser;
    string strError = "";
    // what popup?
    bool ShowPopup = false;

    // why use it?
    void AddNew()
    {
        initializer = new Initializers();
        possitions = db.Possition.ToList();
        educations = db.Education.ToList();
        areas = db.Areaq.ToList();
        awards = db.Award.ToList();
        //maay...
        // initializers = db.Initializers.ToList();
        //regions = db.Region.ToList();
        // documents = db.Document.ToList();
        initializer.Id = 0;
        ShowPopup = true;

        fileNamesA = "";
        fileNamesB = "";
        fileNamesC = "";
        fileNamesD = "";
        fileNamesE = "";
    }

    async Task Save()
    {
        // where validation?
        try
        {
            // Is this an existing user?
            if (initializer.Id != 0)
            {
                // why so?
                Initializers init = await db.Initializers.FindAsync(initializer.Id);
                init.PersonName = initializer.PersonName;
                init.PersonSurname = initializer.PersonSurname;
                init.PersonPatronymic = initializer.PersonPatronymic;
                init.DateOfBirth = initializer.DateOfBirth;
                init.CellPhone = initializer.CellPhone;
                init.EmailAddress = initializer.EmailAddress;
                init.PersonAddress = initializer.PersonAddress;
                init.Possition = initializer.Possition;
                possitions = db.Possition.ToList();
                educations = db.Education.ToList();
                areas = db.Areaq.ToList();
                awards = db.Award.ToList();
                await db.SaveChangesAsync();
            }
            else
            {
                // int maxId = db.Initializers.Max(x => x.Id);
                // initializer.Id = (maxId + 1);
                db.Initializers.Add(initializer);
                await db.SaveChangesAsync();
            }

            // Upload files and in server update Initializer
            SaveFiles(allFiles[0], initializer.Id, "заявление");
            SaveFiles(allFiles[1], initializer.Id, "представление");
            SaveFiles(allFiles[2], initializer.Id, "трудовая");
            SaveFiles(allFiles[3], initializer.Id, "награда");
            SaveFiles(allFiles[4], initializer.Id, "выписка");

            // Close the Popup
            ShowPopup = false;
            // Refresh Users
            LoadData();
            initializer = new Initializers();
        }
        catch (Exception ex)
        {
            strError = ex.GetBaseException().Message;
            System.Diagnostics.Debug.Print(strError);
        }
    }


    // to upload files
    async void SaveFiles(IFileListEntry[] files, int initializatorId, string fileTypeName)
    {

        if (files == null) return;

        // save files names
        string filesNames = "";

        foreach (var file in files)
        {
            Random rnd = new Random();
            string filename = fileTypeName + "_" + rnd.Next(1, 10000) + Path.GetExtension(file.Name);

            //
            await postFiles.UploadAsync(file, filename, initializatorId, fileTypeName);

            // add file name
            filesNames += filename + ";";
        }
    }

    public class FileName
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }

    int fileNamesId = 0;
    public List<FileName> GetFileNames(Initializers init) {

        List<FileName> fileNames = new List<FileName> {
            new FileName{ Id = fileNamesId+0, Name = init.FilesNamesZayavleniye},
            new FileName{ Id = fileNamesId+1, Name = init.FilesNamesPredstavleniye},
            new FileName{ Id = fileNamesId+2, Name = init.FilesNamesTrudovaya},
            new FileName{ Id = fileNamesId+3, Name = init.FilesNamesNagrady},
            new FileName{ Id = fileNamesId+4, Name = init.FilesNamesVypyska}
         };
        fileNamesId += 5;
        System.Diagnostics.Debug.Print(init.FilesNamesZayavleniye);
        return fileNames;
    }


    // what is it? where editing?
    void Edit(Initializers rc)
    {
        initializer = rc;
        possitions = db.Possition.ToList();
        educations = db.Education.ToList();
        areas = db.Areaq.ToList();
        awards = db.Award.ToList();
        //products = db.Products.Where(x => x.CategoryId == ).ToList();
        ShowPopup = true;
    }

    // to delete
    async Task Delete()
    {
        // Close the Popup
        ShowPopup = false;
        // Get the user
        var rc = await db.Initializers.FindAsync(initializer.Id);
        if (rc != null)
        {
            db.Initializers.Remove(rc);
            await db.SaveChangesAsync();
        }
        LoadData();
    }

    // when page loaded
    protected override async Task OnInitializedAsync()
    {
        // why getting user?
        CurrentUser = (await authenticationStateTask).User;
        objUser = await _userManager.FindByNameAsync(CurrentUser.Identity.Name);

        // what data loading?
        LoadData();
    }

    // loading Initiators
    public void LoadData()
    {

        // loading Initiators
        initializers = db.Initializers
            .OrderBy(x => x.PersonSurname)
            .Include(o => o.Possition)
            .Include(o => o.Education)
            .Include(o => o.Areak)
            .Include(o => o.Award)
            .Include(o => o.Orders)
            .ToList();

    }


    // What data?
    // Дата
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    void Change(DateTime? value, string name, string format)
    {
        events.Add(DateTime.Now, $"{name} value changed to {value?.ToString(format)}");
        StateHasChanged();
    }


    // close popup
    void ClosePopup()
    {
        // Close the Popup
        ShowPopup = false;
    }


}
