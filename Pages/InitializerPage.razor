@page "/InitializerPage"
@using Microsoft.AspNetCore.Identity;
@using BlzMON.Data
@using BlzMON.Models
@using System.Threading.Tasks
@using BlazorInputFile
@using Radzen
@using System.Data

@inject UserManager<ApplicationUser> _userManager;

@inject InitializerService objInitService;

<NavLink class="nav-link" href="AddInitializerPage">
    <span class="oi oi-plus" area-hodden="true"></span>Add New
</NavLink>
@if (initializers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4"></div>
        <div class="col-md-4"><h4>Список инициаторов</h4></div>
        <div class="col-md-4"></div>
    </div>

<table class="table">
    <tr>
        <td width="30%"><input @bind-value="@item" placeholder="Поиск" class="form-control" @bind-value:event="oninput" /></td>
        <td width="70%"></td>
    </tr>
</table>


<table class="table table-striped">
    <thead>
        <tr>
            <th>ID</th>
            <th>Фамилия</th>
            <th>Имя</th>
            <th>Отчество</th>
            <th>Должность</th>
            <th>Образование</th>
            <th>Стаж работы</th>
            <th>Область</th>
            <th>Дата рождения</th>
            <th>Телефон</th>
            <th>Почта</th>
            <th>Адрес</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in initializers)
        {
            <tr>
                <td>@item.Id</td>
                <td>@item.PersonSurname</td>
                <td>@item.PersonName</td>
                <td>@item.PersonPatronymic</td>
                <td>@item.Possition.PossName</td>
                <td>@item.Education.EduName</td>
                <td>@item.WorkExpierence</td>
                <td>@item.Areak.AreaName</td>
                <td>@item.DateOfBirth</td>
                <td>@item.CellPhone</td>
                <td>@item.EmailAddress</td>
                <td>@item.PersonAddress</td>
                <td>
                    <!-- Edit the current forecast -->
                    <a class="nav-link" href="EditInitializerPage/@item.Id">
                        <span class="oi oi-pencil" area-hidden="true"> </span> Edit
                    </a>
                    <a class="nav-link" href="DeleteInitializerPage/@item.Id">
                        <span class="oi oi-trash" area-hidden="true"></span>Delete
                    </a>
                </td>
            </tr>
        }
    </tbody>
</table>

}


@code {
    public List<Initializers> initializers = new List<Initializers>();
    public List<Initializers> initializers2 = new List<Initializers>();
    public Initializers initializer = new Initializers();
    List<Possitions> possitions = new List<Possitions>();
    List<Educations> educations = new List<Educations>();
    List<Areass> areas = new List<Areass>();
    //List<Regions> regions = new List<Regions>();
    //List<Initializers> initializers = new List<Initializers>();
    // List<Documents> documents = new List<Documents>();
    // Initializers initializer = new Initializers();


    private int CurrentValue { get; set; }
    public string itemValue { get; set; }
    public string item
    {
        get { return itemValue; }
        set
        {
            CurrentValue = initializers.Count();
            if (value.Length > 0)
            {
                initializers = initializers2.Where(x => x.PersonSurname.ToLower().Contains(value)).ToList();
            }
            else
            {
                initializers = initializers2;
            }
            itemValue = value;
        }
    }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    System.Security.Claims.ClaimsPrincipal CurrentUser;

    ApplicationUser objUser;
    string strError = "";
    bool ShowPopup = false;

    // List<Initializers> initializers;
    protected override async Task OnInitializedAsync()
    {
        initializers = await Task.Run(() => objInitService.GetInitializers());

        CurrentUser = (await authenticationStateTask).User;
        objUser = await _userManager.FindByNameAsync(CurrentUser.Identity.Name);

    }




  
}
