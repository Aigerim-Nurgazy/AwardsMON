@page "/InitializerPage"
@using Microsoft.AspNetCore.Identity;
@using BlzMON.Data
@using BlzMON.Models
@using System.Threading.Tasks
@using BlazorInputFile
@using Radzen
@using Radzen.Blazor
@using System.Data
@using Microsoft.AspNetCore.Mvc.Localization;
@using Microsoft.AspNetCore.Localization;
@using BlzMON.Controllers
@using System.IO;

@inject IViewLocalizer Localizer


@inject UserManager<ApplicationUser> _userManager;
@inject ApplicationDbContext db



@if (ShowPopup == false)
{
    <div class="row">
        <div class="col-md-4"></div>
        <div class="col-md-4"><h4>Список инициаторов</h4></div>
        <div class="col-md-4"></div>
    </div>

    <table class="table">
        <tr>
            <td width="30%"><input @bind-value="@item" placeholder="Поиск" class="form-control" @bind-value:event="oninput" /></td>
            <td width="40%"></td>
            <td width="30%"><button class="btn btn-success" @onclick="AddNew">Добавить новый</button></td>
        </tr>
    </table>


    <table class="table table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>Фамилия</th>
                <th>Имя</th>
                <th>Отчество</th>
                <th>Должность</th>
                <th>Образование</th>
                <th>Стаж работы</th>
                <th>Область</th>
                <th>Дата рождения</th>
                <th>Телефон</th>
                <th>Почта</th>
                <th>Адрес</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in initializers)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.PersonSurname</td>
                    <td>@item.PersonName</td>
                    <td>@item.PersonPatronymic</td>
                    <td>@item.Possition.PossName</td>
                    <td>@item.Education.EduName</td>
                    <td>@item.WorkExpierence</td>
                    <td>@item.Areak.AreaName</td>
                    <td>@item.DateOfBirth</td>
                    <td>@item.CellPhone</td>
                    <td>@item.EmailAddress</td>
                    <td>@item.PersonAddress</td>
                    <td>
                        <!-- Edit the current forecast -->
                        <button class="btn btn-primary"
                                @onclick="(() => Edit(item))">
                            Редактировать
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (ShowPopup)
{
    <div class="row">
        <div class="col-md-4"></div>
        <div class="col-md-4"><h4>Редактирование</h4></div>
        <div class="col-md-4"></div>
    </div>
    <table class="table">


        <tr>
            <td>Фамилия</td>
            <td><input type="text" class="form-control" @bind="@initializer.PersonSurname" /></td>
        </tr>

        <tr>
            <td>Имя</td>
            <td><input type="text" class="form-control" @bind="@initializer.PersonName" /></td>
        </tr>
        <tr>
            <td>Отчество</td>
            <td><input type="text" class="form-control" @bind="@initializer.PersonPatronymic" /></td>
        </tr>

        <tr>
            <td>Должность</td>
            <td>
                <select class="form-control" @bind="@initializer.PossitionsId">
                    @foreach (var cnt in possitions)
                    {
                        <option value="@cnt.Id">@cnt.PossName</option>
                    }
                </select>
            </td>
        </tr>

        <tr>
            <td>Образование</td>
            <td>
                <select class="form-control" @bind="@initializer.EducationsId">
                    @foreach (var cnt in educations)
                    {
                        <option value="@cnt.Id">@cnt.EduName</option>
                    }
                </select>
            </td>
        </tr>

        <tr>
            <td>Опыт</td>
            <td><input type="text" class="form-control" @bind="@initializer.WorkExpierence" /></td>
        </tr>


        <tr>
            <td>Область</td>
            <td>
                <select class="form-control" @bind="@initializer.AreassId">
                    @foreach (var cnt in areas)
                    {
                        <option value="@cnt.Id">@cnt.AreaName</option>
                    }
                </select>
            </td>
        </tr>


        <tr>
            <td>Дата рождения</td>
            <td><RadzenDatePicker @bind-Value="initializer.DateOfBirth" DateFormat="d" Change="@(args => Change(args, "DatePicker", "MM/dd/yyyy"))" /></td>

        </tr>



        <tr>
            <td>Телефон</td>
            <td><input type="text" class="form-control" @bind="@initializer.CellPhone" /></td>
        </tr>

        <tr>
            <td>Почта</td>
            <td><input type="text" class="form-control" @bind="@initializer.EmailAddress" /></td>
        </tr>
        <tr>
            <td>Адрес</td>
            <td><input type="text" class="form-control" @bind="@initializer.PersonAddress" /></td>
        </tr>

        <tr>
            <td>Выберите документы</td>
            <RadzenUpload Multiple="true" Url="InitializerPage/Multiple" ChooseText="Выбрать файлы" Style="margin-bottom: 20px;" Progress="@((args) => OnProgress(args, "Загрузкa файлов"))" />
        </tr>
        <tr>
            <td>Загрузка...</td>
            <RadzenCard Style="overflow:auto;">
                <RadzenProgressBar Value="@progress"  Unit="@info" Vissible="@(progress>0)" Style="margin-bottom:20px;"></RadzenProgressBar>
            </RadzenCard>
        </tr>


        <tr>
            <td>
                @if (initializer.Id != 0)
                {
                    <!-- Button to delete the forecast -->
                    <button class="btn btn-danger" @onclick="Delete">
                        Удалить
                    </button>
                }
            </td>
            <td>
                <button class="btn btn-primary" @onclick="Save">
                    Сохранить
                </button>
            </td>
            <td>
                <button class="btn btn-primary" @onclick="ClosePopup">
                    Назад
                </button>
            </td>
        </tr>
    </table>

}



@code {
    public List<Initializers> initializers = new List<Initializers>();
    public List<Initializers> initializers2 = new List<Initializers>();
    public Initializers initializer = new Initializers();


    List<Possitions> possitions = new List<Possitions>();
    List<Educations> educations = new List<Educations>();
    List<Areass> areas = new List<Areass>();
    //List<Regions> regions = new List<Regions>();
    //List<Initializers> initializers = new List<Initializers>();
    // List<Documents> documents = new List<Documents>();
    // Initializers initializer = new Initializers();


    private int CurrentValue { get; set; }
    public string itemValue { get; set; }
    public string item
    {
        get { return itemValue; }
        set
        {
            CurrentValue = initializers.Count();
            if (value.Length > 0)
            {
                initializers = initializers2.Where(x => x.PersonSurname.ToLower().Contains(value)).ToList();
            }
            else
            {
                initializers = initializers2;
            }
            itemValue = value;
        }
    }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    System.Security.Claims.ClaimsPrincipal CurrentUser;

    ApplicationUser objUser;
    string strError = "";
    bool ShowPopup = false;


    void AddNew()
    {
        initializer = new Initializers();
        possitions = db.Possition.ToList();
        educations = db.Education.ToList();
        areas = db.Areaq.ToList();
        //maay
        // initializers = db.Initializers.ToList();
        //regions = db.Region.ToList();
        // documents = db.Document.ToList();
        initializer.Id = 0;
        ShowPopup = true;

    }
    async Task Save()
    {
        try
        {
            // Is this an existing user?
            if (initializer.Id != 0)
            {
                Initializers init = await db.Initializers.FindAsync(initializer.Id);
                //...IG dont forget this one

                init.PersonName = initializer.PersonName;
                init.PersonSurname = initializer.PersonSurname;
                init.PersonPatronymic = initializer.PersonPatronymic;
                init.DateOfBirth = initializer.DateOfBirth;
                init.CellPhone = initializer.CellPhone;
                init.EmailAddress = initializer.EmailAddress;
                init.PersonAddress = initializer.PersonAddress;
                //init.Possition = initializer.Possition;
                possitions = db.Possition.ToList();
                educations = db.Education.ToList();
                areas = db.Areaq.ToList();
                await db.SaveChangesAsync();
            }
            else
            {
                // int maxId = db.Initializers.Max(x => x.Id);
                // initializer.Id = (maxId + 1);
                db.Initializers.Add(initializer);
                await db.SaveChangesAsync();
            }

            // Close the Popup
            ShowPopup = false;
            // Refresh Users
            LoadData();
            initializer = new Initializers();
        }
        catch (Exception ex)
        {
            strError = ex.GetBaseException().Message;
        }
    }
    async Task Edit(Initializers rc)
    {
        initializer = rc;
        possitions = db.Possition.ToList();
        educations = db.Education.ToList();
        areas = db.Areaq.ToList();
        //products = db.Products.Where(x => x.CategoryId == ).ToList();
        ShowPopup = true;
    }
    async Task Delete()
    {
        // Close the Popup
        ShowPopup = false;
        // Get the user
        var rc = await db.Initializers.FindAsync(initializer.Id);
        if (rc != null)
        {
            db.Initializers.Remove(rc);
            await db.SaveChangesAsync();
        }
        LoadData();
    }
    void ClosePopup()
    {
        // Close the Popup
        ShowPopup = false;
    }
    protected override async Task OnInitializedAsync()
    {
        CurrentUser = (await authenticationStateTask).User;
        objUser = await _userManager.FindByNameAsync(CurrentUser.Identity.Name);

        initializer = new Initializers();
        LoadData();
    }
    public void LoadData()
    {
        initializers = db.Initializers.OrderBy(x => x.PersonSurname).ToList();
        // initializers2 initializer= db.Initializers.OrderBy(x => x.PersonName).ToList(); //double shit :)
    }
    private async Task Insert()
    {
        db.Initializers.Add(initializer);
        await db.SaveChangesAsync();
        initializers.Add(initializer);
        initializer = new Initializers();
    }
    Dictionary<DateTime, string> events = new Dictionary<DateTime, string>();

    void Change(DateTime? value, string name, string format)
    {
        events.Add(DateTime.Now, $"{name} value changed to {value?.ToString(format)}");
        StateHasChanged();
    }
    int progress;
    string info;
    void OnProgress(UploadProgressArgs args, string name)
    {
        this.info = $"%'{name}'/{args.Loaded}of {args.Total}bytes.";
        this.progress = args.Progress;
    }


}
