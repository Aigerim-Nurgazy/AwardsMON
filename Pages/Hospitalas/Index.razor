@page "/hospitals/index"

@using Microsoft.AspNetCore.Identity;
@using HospitalsBlz.Data
@using HospitalsBlz.Models
@inject UserManager<ApplicationUser> _userManager;

@inject ApplicationDbContext db

 

<div class="row">
    <div class="col-md-4"></div>
    <div class="col-md-4"><h4>Список учреждений</h4></div>
    <div class="col-md-4"></div>
</div>

<table class="table">
    <tr>
        <td width="30%"><input @bind-value="@item" placeholder="Поиск" class="form-control" @bind-value:event="oninput" /></td>
        <td width="40%"></td>
        <td width="30%"><button class="btn btn-success" @onclick="AddNewUser">Добавить новый</button></td>
    </tr>
</table>


<table class="table table-striped">
    <thead>
        <tr>
            <th>Наименование</th>
            <th>Адрес</th>
            <th>Контакное лицо</th>
            <th>Телефон</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in hospitals)
        {
        <tr>
            <td>@item.Name</td>
            <td>@item.Address</td>
            <td>@item.Person</td>
            <td>@item.Contacts</td>
            <td>
                <!-- Edit the current forecast -->
                <button class="btn btn-primary"
                        @onclick="(() => EditUser(item))">
                    Редактировать
                </button>
            </td>
        </tr>
        }
    </tbody>
</table>


@if (ShowPopup)
{
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">Редактирование</h3>
                    <button type="button" class="close"
                            @onclick="ClosePopup">
                        <span aria-hidden="true">X</span>
                    </button>
                </div>
                <div class="modal-body">
                    <span style="color:red">@strError</span>
                    <table class="table">
                        <tr>
                            <td>Наименование</td>
                            <td><input type="text" class="form-control" @bind="@hospital.Name" /></td>
                        </tr>

                        <tr>
                            <td>Адрес</td>
                            <td><input type="text" class="form-control" @bind="@hospital.Address" /></td>
                        </tr>
                        <tr>
                            <td>Контактное лицо</td>
                            <td><input type="text" class="form-control" @bind="@hospital.Person" /></td>
                        </tr>
                        <tr>
                            <td>Телефон</td>
                            <td><input type="text" class="form-control" @bind="@hospital.Contacts" /></td>
                        </tr>
                        <tr>
                            <td>
                                @if (hospital.Id != 0)
                                {
                                    <!-- Button to delete the forecast -->
                                    <button class="btn btn-danger" @onclick="DeleteUser">
                                        Удалить
                                    </button>
                                }
                            </td>
                            <td>
                                <button class="btn btn-primary" @onclick="SaveUser">
                                    Сохранить
                                </button>
                            </td>
                        </tr>
                    </table>
                </div>
            </div>

        </div>
    </div>
}



@code {
    private int CurrentValue { get; set; }
    public string itemValue { get; set; }
    public string item
    {
        get { return itemValue; }
        set
        {
            CurrentValue = hospitals.Count();
            if (value.Length > 0)
            {
                hospitals = hospitals2.Where(x => x.Name.ToLower().Contains(value)).ToList();
            }
            else
            {
                hospitals = hospitals2;
            }
            itemValue = value;
        }
    }
    private List<Hospitals> hospitals=new List<Hospitals>();
    private List<Hospitals> hospitals2;
    private Hospitals hospital = new Hospitals();

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    System.Security.Claims.ClaimsPrincipal CurrentUser;

    ApplicationUser objUser;
    string strError = "";
    bool ShowPopup = false;


    void AddNewUser()
    {
        hospital = new Hospitals();
        hospital.Code = "Test";
        hospital.Id = 0;
        ShowPopup = true;
    }
    async Task SaveUser()
    {
        try
        {
            // Is this an existing user?
            if (hospital.Id != 0)
            {
                Hospitals hosp = await db.Hospitals.FindAsync(hospital.Id);
                hosp.Name = hospital.Name;
                hosp.Code = hospital.Code;
                hosp.Address = hospital.Address;
                hosp.Contacts = hospital.Contacts;
                hosp.Description = hospital.Description;
                hosp.Person = hospital.Person; ;
                await db.SaveChangesAsync();
            }
            else
            {
                int maxId = db.Hospitals.Max(x => x.Id);
                hospital.Id = (maxId + 1);
                db.Hospitals.Add(hospital);
                await db.SaveChangesAsync();
            }

            // Close the Popup
            ShowPopup = false;
            // Refresh Users
            LoadData();
            hospital = new Hospitals();
        }
        catch (Exception ex)
        {
            strError = ex.GetBaseException().Message;
        }
    }
    async Task EditUser(Hospitals rc)
    {
        hospital = rc;
        //products = db.Products.Where(x => x.CategoryId == ).ToList();
        ShowPopup = true;
    }
    async Task DeleteUser()
    {
        // Close the Popup
        ShowPopup = false;
        // Get the user
        var rc = await db.Hospitals.FindAsync(hospital.Id);
        if (rc != null)
        {
            db.Hospitals.Remove(rc);
            await db.SaveChangesAsync();
        }
        LoadData();
    }
    void ClosePopup()
    {
        // Close the Popup
        ShowPopup = false;
    }

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = (await authenticationStateTask).User;
        objUser = await _userManager.FindByNameAsync(CurrentUser.Identity.Name);

        hospital = new Hospitals();
        LoadData();
    }

    public void LoadData()
    {
        hospitals = db.Hospitals.OrderBy(x=>x.Name).ToList();
        hospitals2 = db.Hospitals.OrderBy(x => x.Name).ToList();
    }



    private async Task InsertHospitals()
    {
        db.Hospitals.Add(hospital);
        await db.SaveChangesAsync();
        hospitals.Add(hospital);
        hospital = new Hospitals();
    }

}
