#pragma checksum "/Users/aigerim/Downloads/PFT/BlzMON/Pages/UserPage.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "eeb20ae7eaa34fcbbd4d7d397d4e631ae832894b"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlzMON.Pages
{
    #line hidden
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "/Users/aigerim/Downloads/PFT/BlzMON/_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/Users/aigerim/Downloads/PFT/BlzMON/_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/Users/aigerim/Downloads/PFT/BlzMON/_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/Users/aigerim/Downloads/PFT/BlzMON/_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "/Users/aigerim/Downloads/PFT/BlzMON/_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "/Users/aigerim/Downloads/PFT/BlzMON/_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "/Users/aigerim/Downloads/PFT/BlzMON/_Imports.razor"
using Microsoft.AspNetCore.Localization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "/Users/aigerim/Downloads/PFT/BlzMON/_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "/Users/aigerim/Downloads/PFT/BlzMON/_Imports.razor"
using BlzMON;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "/Users/aigerim/Downloads/PFT/BlzMON/_Imports.razor"
using BlzMON.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "/Users/aigerim/Downloads/PFT/BlzMON/_Imports.razor"
using MatBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "/Users/aigerim/Downloads/PFT/BlzMON/_Imports.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "/Users/aigerim/Downloads/PFT/BlzMON/_Imports.razor"
using Radzen.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "/Users/aigerim/Downloads/PFT/BlzMON/_Imports.razor"
using BlazorInputFile;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "/Users/aigerim/Downloads/PFT/BlzMON/_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "/Users/aigerim/Downloads/PFT/BlzMON/_Imports.razor"
using System.Collections.Generic;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "/Users/aigerim/Downloads/PFT/BlzMON/_Imports.razor"
using System.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "/Users/aigerim/Downloads/PFT/BlzMON/_Imports.razor"
using System;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/Users/aigerim/Downloads/PFT/BlzMON/Pages/UserPage.razor"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/Users/aigerim/Downloads/PFT/BlzMON/Pages/UserPage.razor"
using BlzMON.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/Users/aigerim/Downloads/PFT/BlzMON/Pages/UserPage.razor"
using BlzMON.Data;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/userlist")]
    public partial class UserPage : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 96 "/Users/aigerim/Downloads/PFT/BlzMON/Pages/UserPage.razor"
       
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string ADMINISTRATION_ROLE = "Admin";
    System.Security.Claims.ClaimsPrincipal CurrentUser;

    IdentityUser objUser = new IdentityUser();
    // Tracks the selected role for the currently selected user
    string CurrentUserRole { get; set; } = "Manager";
    int InitializerId = 0;
    // Collection to display the existing users
    // Options to display in the roles dropdown when editing a user
    //List<string> Options = new List<string>() { "Manager", "Member" };
    // To hold any possible errors
    string strError = "";
    // To enable showing the Popup
    bool ShowPopup = false;
    List<ApplicationUser> users = new List<ApplicationUser>();
    List<Initializers> initializers = new List<Initializers>();

    public void GetUsers()
    {
        // Collection to hold users
        users = new List<ApplicationUser>();
        // get users from _UserManager
        var user = _userManager.Users.Select(x => new ApplicationUser
        {
            Id = x.Id,
            UserName = x.UserName,
            //InitializerlsId = x.InitializerlsId,
            PasswordHash = "*****"
        });
        foreach (var item in user)
        {
            users.Add(item);
        }
    }

    void AddNewUser()
    {
        // Make new user
        objUser = new ApplicationUser();
        objUser.PasswordHash = "*****";
        // Set Id to blank so we know it is a new record
        objUser.Id = "";
        // Open the Popup
        ShowPopup = true;
    }
    async Task SaveUser()
    {
        try
        {
            // Is this an existing user?
            if (objUser.Id != "")
            {
                // Get the user
                var user = await _userManager.FindByIdAsync(objUser.Id);
                // Update Email
                user.Email = objUser.Email;
                //user.HospitalsId = HospitalId;//  HospitalId???
                //user.InitializerlsId = InitializerId;
                // Update the user
                await _userManager.UpdateAsync(user);
                // Only update password if the current value
                // is not the default value
                if (objUser.PasswordHash != "*****")
                {
                    var resetToken =await _userManager.GeneratePasswordResetTokenAsync(user);
                    var passworduser =await _userManager.ResetPasswordAsync(
                            user,
                            resetToken,
                            objUser.PasswordHash);
                    if (!passworduser.Succeeded)
                    {
                        if (passworduser.Errors.FirstOrDefault() != null)
                        {
                            strError =passworduser.Errors.FirstOrDefault().Description;
                        }
                        else
                        {
                            strError = "Pasword error";
                        }
                        // Keep the popup opened
                        return;
                    }
                }
                // Handle Roles // Is user in administrator role?
                var UserResult = await _userManager.IsInRoleAsync(user, ADMINISTRATION_ROLE);
                // Is Administrator role selected // but user is not an Administrator?
                if ((CurrentUserRole == ADMINISTRATION_ROLE) & (!UserResult))
                {
                    // Put admin in Administrator role
                    await _userManager.AddToRoleAsync(user, ADMINISTRATION_ROLE);
                }
                else
                {
                    await _userManager.AddToRoleAsync(user, CurrentUserRole);
                    //// Is Administrator role not selected // but user is an Administrator?
                    //if ((CurrentUserRole != ADMINISTRATION_ROLE) & (UserResult))
                    //{
                    //    // Remove user from Administrator role
                    //    await _userManager.RemoveFromRoleAsync(user, ADMINISTRATION_ROLE);
                    //}
                }
            }
            else
            {
                // Insert new user
                var NewUser = new ApplicationUser
                {
                    UserName = objUser.UserName,
                    Email = objUser.Email,
                   // InitializerlsId = InitializerId
                };
                var CreateResult = await _userManager.CreateAsync(NewUser, objUser.PasswordHash);
                if (!CreateResult.Succeeded)
                {
                    if (CreateResult.Errors.FirstOrDefault() != null)
                    {
                        strError =CreateResult.Errors.FirstOrDefault().Description;
                    }
                    else
                    {
                        strError = "Create error";
                    }
                    // Keep the popup opened
                    return;
                }
                else
                {
                    // Handle Roles
                    //if (CurrentUserRole == ADMINISTRATION_ROLE)
                    //{
                    // Put admin in Administrator role
                    await _userManager.AddToRoleAsync(NewUser, CurrentUserRole);
                    //}
                }
            }
            // Close the Popup
            ShowPopup = false;
            // Refresh Users
            GetUsers();
        }
        catch (Exception ex)
        {
            strError = ex.GetBaseException().Message;
        }
    }
    async Task EditUser(ApplicationUser _IdentityUser)
    {
        // Set the selected user as the current user
        objUser = _IdentityUser;
        // Get the user
        var user = await _userManager.FindByIdAsync(objUser.Id);
        if (user != null)
        {
            CurrentUserRole = "Manager";
            // Is user in administrator role?
            //var UserResult =await _userManager.IsInRoleAsync(user, ADMINISTRATION_ROLE);
            //if (UserResult)
            //{
            //    CurrentUserRole = ADMINISTRATION_ROLE;
            //}
            //else
            //{
            //    CurrentUserRole = "Manager";
            //}
        }
        // Open the Popup
        ShowPopup = true;
    }
    async Task DeleteUser()
    {
        // Close the Popup
        ShowPopup = false;
        // Get the user
        var user = await _userManager.FindByIdAsync(objUser.Id);
        if (user != null)
        {
            // Delete the user
            await _userManager.DeleteAsync(user);
        }
        // Refresh Users
        GetUsers();
    }
    void ClosePopup()
    {
        // Close the Popup
        ShowPopup = false;
    }


    protected override async Task OnInitializedAsync()
    {
        initializers = db.Initializers.ToList();
        GetUsers();
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private UserManager<ApplicationUser> _userManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ApplicationDbContext db { get; set; }
    }
}
#pragma warning restore 1591
