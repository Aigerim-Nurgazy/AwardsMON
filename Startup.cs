using System;using System.Collections.Generic;using System.Linq;using System.Threading.Tasks;using Microsoft.AspNetCore.Builder;using Microsoft.AspNetCore.Components;using Microsoft.AspNetCore.Components.Authorization;using Microsoft.AspNetCore.Identity;using Microsoft.AspNetCore.Identity.UI;using Microsoft.AspNetCore.Hosting;using Microsoft.AspNetCore.HttpsPolicy;using Microsoft.EntityFrameworkCore;using Microsoft.Extensions.Configuration;using Microsoft.Extensions.DependencyInjection;using Microsoft.Extensions.Hosting;using BlzMON.Areas.Identity;using BlzMON.Data;using BlzMON.Models;using Microsoft.AspNetCore.HttpOverrides;using BlazorDownloadFile;using System.Globalization;using Microsoft.AspNetCore.Localization;using System.IO;using BlzMON.Services;

namespace BlzMON{    public class Startup    {        public Startup(IConfiguration configuration)        {            Configuration = configuration;        }        public IConfiguration Configuration { get; }        // This method gets called by the runtime. Use this method to add services to the container.        // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940        public void ConfigureServices(IServiceCollection services)        {            //services.AddDbContext<ApplicationDbContext>(options =>            //    options.UseSqlServer(            //        Configuration.GetConnectionString("DefaultConnection")));            services.AddDbContext<ApplicationDbContext>(options => //options.UsePostgreSql(Configuration.GetConnectionString("DefaultConnection")));            options.UseNpgsql(                Configuration.GetConnectionString("DefaultConnection")));            //services.AddDefaultIdentity<IdentityUser>()            //    .AddEntityFrameworkStores<ApplicationDbContext>();            services.AddDefaultIdentity<ApplicationUser>()                .AddRoles<IdentityRole>()                .AddEntityFrameworkStores<ApplicationDbContext>();                       services.AddRazorPages();            services.AddServerSideBlazor();            services.AddScoped<AuthenticationStateProvider, RevalidatingIdentityAuthenticationStateProvider<IdentityUser>>();            services.AddSingleton<WeatherForecastService>();            // service to upload several files            services.AddSingleton<PostFiles>();            services.AddBlazorDownloadFile();
            services.AddMvc()           // .AddViewLocalization(LanguageViewLocationExpanderFormat.Suffix);           .AddViewLocalization(Microsoft.AspNetCore.Mvc.Razor.LanguageViewLocationExpanderFormat.Suffix);                            services.AddPortableObjectLocalization();            services.Configure<RequestLocalizationOptions>(options =>            {                var supportedCultures = new List<CultureInfo>            {                               new CultureInfo("ru-RU"),                new CultureInfo("ru")            };                options.DefaultRequestCulture = new RequestCulture("ru-RU");                options.SupportedCultures = supportedCultures;                options.SupportedUICultures = supportedCultures;            });        }               // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.        public void Configure(IApplicationBuilder app, IWebHostEnvironment env, ApplicationDbContext db, IServiceProvider serviceProvider)        {            if (env.IsDevelopment())            {                app.UseDeveloperExceptionPage();                app.UseDatabaseErrorPage();            }            else            {                app.UseExceptionHandler("/Error");                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.                app.UseHsts();            }            app.UseHttpsRedirection();            app.UseStaticFiles();            app.UseRouting();            app.UseForwardedHeaders(new ForwardedHeadersOptions            {                ForwardedHeaders = ForwardedHeaders.XForwardedFor | ForwardedHeaders.XForwardedProto            });            app.UseRequestLocalization();            app.UseAuthentication();            app.UseAuthorization();            app.UseEndpoints(endpoints =>            {                endpoints.MapControllers();                endpoints.MapBlazorHub();                endpoints.MapFallbackToPage("/_Host");                endpoints.MapControllers();            });
            //  DataSeeder.SeedCountries(db);
            //??wtf
            // CreateRoles(serviceProvider, db).Wait();
        }        private async Task CreateRoles(IServiceProvider serviceProvider, ApplicationDbContext db)        {            //initializing custom roles             var RoleManager = serviceProvider.GetRequiredService<RoleManager<IdentityRole>>();            var UserManager = serviceProvider.GetRequiredService<UserManager<ApplicationUser>>();            string[] roleNames = { "Admin", "Manager", "Member" };            IdentityResult roleResult;                        foreach (var roleName in roleNames)            {                var roleExist = await RoleManager.RoleExistsAsync(roleName);                if (!roleExist)                {                    //create the roles and seed them to the database: Question 1                    roleResult = await RoleManager.CreateAsync(new IdentityRole(roleName));                }            }                        //Here you could create a super user who will maintain the web app                        //Initializers initializers = db.Initializers.FirstOrDefault();            var poweruser = new ApplicationUser            {                UserName = "admin@mail.kg",  //Configuration["AppSettings:UserName"],                Email = "admin@mail.kg"  //Configuration["AppSettings:UserEmail"],                //InitializerlsId = initializers.Id,            };            //Ensure you have these values in your appsettings.json file            string userPWD = "PwdSup!23";  //Configuration["AppSettings:UserPassword"];            var _user = await UserManager.FindByEmailAsync("admin@mail.kg");//Configuration["AppSettings:AdminUserEmail"]);            if (_user == null)            {                var createPowerUser = await UserManager.CreateAsync(poweruser, userPWD);                if (createPowerUser.Succeeded)                {                    //here we tie the new user to the role                    await UserManager.AddToRoleAsync(poweruser, "Admin");                }            }        }    }}